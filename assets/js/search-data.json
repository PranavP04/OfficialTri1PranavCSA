{
  
    
        "post0": {
            "title": "AP CSA Test Corrections",
            "content": "Score: 53/66 . Question 8 . . Answer B Incorrect. This would be the result if the division used was floating point division, instead of integer division. This would be the case if either x or y were of type double instead of type int or if either value was typecast as a double in the expression. | Answer C Correct. When we evaluate the express(x &lt; 10) &amp;&amp; (y &lt; 0) for x having the value 7 and y having the value 3, x &lt; 10 evaluates to true, since 7 is less than 10, and y &lt; 0 evaluates to false, since 3 is not less than 0. The logic operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. Since the second condition is false, the boolean expression is false. As a result, the compiler will skip the first output statement and execute the statement in the else. The expression x / y is integer division for 7 / 3, which is 2. | This was more of a conceptual error as I didn’t read the code segment thoroughly resulting in the wrong output being displayed when I looked at it. | . Question 19 . . Answer E Incorrect. This will prevent an ArrayIndexOutOfBoundsException from being thrown if target does not appear in data, however if target is at element 0, -1 will be returned instead of 0 as intended. | Answer A Correct. The seqSearchRecHelper recursive method does not work as intended when target does not appear in data. In this case, when last becomes -1, the method will throw an ArrayIndexOutOfBoundsException in the first if statement after line 1. To prevent this, we should add a check to see if last is less than 0 and if it is, return -1 as expected. | I did this wrong because if you look at the function, the main target wasn’t displaying the correct output. | . Question 21 . . Answer C Incorrect. The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Adding 1 to myList.size() and then multiplying Math.random() by this value results in a range that is from 0 to myList.size(), which is one element too many. | Answer D Correct. The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Using Math.random()generates a random floating point number between 0 and 1, not including 1. When this value is multiplied by the number of elements we want in our range, myList.size(), a random floating point number between 0 and myList.size(), not including myList.size(), is generated. When this value is typecast as an int, the result is an integer value between 0 and myList.size() – 1 inclusive. | In order to get this correct in the future, I plan on studying both topic 2.9 and 7.2 as they cover Arraylists. | . Question 35 . . Answer C Incorrect. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the correct answer if the remove occurred before the size was calculated in the statement animals.add(animals.size()-k, animals.remove(k)); and only one iteration of the loop occurred. | Answer B Correct. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. | To fix this I will focus on topics 2.7 and 7.4 as they cover instatizing and initializing lists. | . Question 42 . . Answer C Incorrect. The value 5 is at newArray[1][1]. | Answer D Correct. The enhanced for loop iterates over the array oldArray. In the first iteration, newArray[0][0] is assigned the value 1. The value of row is incremented to 1. Since 1 % 3 does not equal 0, the statements in the if are not executed. In the next iteration, newArray[1][0] is assigned the value 2. The value of row is incremented to 2. The algorithm continues to fill column 0 with the subsequent values of oldArray. Once row is 3, the if condition is true and row is assigned 0 and col is incremented to 1. The algorithm proceeds to fill column 1. | Resources: 8.1: Daily Video 1 (Skill 3.E), 8.1: Daily Video 2 (Skill 3.E), 8.1: Daily Video 3 (Skill 1.B) | . Question 49 . . Answer D Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer B Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | . Question 56 . . Answer D Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer B Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | . Question 58 . . Answer B Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer E Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | . Question 59 . . Answer C Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer B Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | . Question 63 . . Answer B Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer C Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2023/01/23/66mctestcorrections.html",
            "relUrl": "/markdown/2023/01/23/66mctestcorrections.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Pranav IJave Kernel Examples",
            "content": "public class PrimitiveExamples { public static void main(String[] args) { int exampleInt = 94; double exampleDouble = 100.4; boolean exampleBoolean = false; String exampleString = &quot;Argentina winning the world cup!&quot;; String exampleStringFormal = new String(&quot;Lionel Messi along with the Argentinian National Team are the favorites for this World Cup&quot;); System.out.println(&quot;Integer Example: &quot; + exampleInt); System.out.println(&quot;Double Example: &quot; + exampleDouble); System.out.println(&quot;Boolean Example: &quot; + exampleBoolean); System.out.println(&quot;String Example: &quot; + exampleString); System.out.println(&quot;Formal String Example: &quot; + exampleStringFormal); } } PrimitiveExamples.main(null) . Integer Example: 94 Double Example: 100.4 Boolean Example: false String Example: Argentina winning the world cup! Formal String Example: Lionel Messi along with the Argentinian National Team are the favorites for this World Cup . import java.util.Scanner; public class PranavPrimitivesExamples { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type An Integer: &quot;); try { int PersonInt = input.nextInt(); System.out.println(PersonInt); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t An Integer (form like 159), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A Double: &quot;); try { double PersonDouble = input.nextDouble(); System.out.println(PersonDouble); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A Double (form like 9.99), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A Boolean: &quot;); try { boolean PersonBoolean = input.nextBoolean(); System.out.println(PersonBoolean); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A Boolean (true or false), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A String: &quot;); try { String PersonString = input.nextLine(); System.out.println(PersonString); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A String, &quot; + e); } input.close(); } } PranavPrimitivesExamples.main(null); . Type An Integer: 5 5 Type A Double: 10.7 10.7 Type A Boolean: true true Type A String: yooooo yooooo . . public class PranavPrimitiveDivision { public static void main(String[] args) { int b1 = 9, b2 = 3; System.out.println(&quot;Division For Integers&quot;); System.out.println(&quot;int output with concatenation: &quot; + b1 + &quot;/&quot; + b2 + &quot; = &quot; + b1/b2); System.out.println(String.format(&quot;int output with format: %d/%d = %d&quot;,b1, b2, b1/b2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,b1, b2, b1/b2); double c1 = 9, c2 = 3; System.out.println(&quot;Division For Doubles&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + c1 + &quot;/&quot; + c2 + &quot; = &quot; + c1/c2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,c1, c2, c1/c2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,c1, c2, c1/c2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,b1, b2, b1/(double)b2); System.out.println(&quot; tint using modulo for remainder: &quot; + b1 + &quot;/&quot; + b2 + &quot; = &quot; + b1/b2 + &quot; remainder &quot; + b1%b2); } } PranavPrimitiveDivision.main(null); . Division For Integers int output with concatenation: 9/3 = 3 int output with format: 9/3 = 3 int output with printf: 9/3 = 3 Division For Doubles double output with concatenation: 9.0/3.0 = 3.0 double output with format: 9.00/3.00 = 3.00 double output with printf: 9.00/3.00 = 3.00 Casting and Remainders int cast to double on division: 9/3 = 3.00 int using modulo for remainder: 9/3 = 3 remainder 0 . public class PranavSchoolGradeCalculator { ArrayList&lt;Double&gt; grades; public PranavSchoolGradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.grades.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } public double average() { double total = 0; for (double num : this.grades) { total += num; } return (total / this.grades.size()); } public static void main(String[] args) { PranavSchoolGradeCalculator grades = new PranavSchoolGradeCalculator(); System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); } } PranavSchoolGradeCalculator.main(null); . Enter a double, 0 to exit: 10.5 10.5 Enter a double, 0 to exit: 11 11.0 Enter a double, 0 to exit: 12.3 12.3 Enter a double, 0 to exit: 14.5 14.5 Enter a double, 0 to exit: 55.5 55.5 Enter a double, 0 to exit: 65.6 65.6 Enter a double, 0 to exit: 0 0.0 Average: 28.23 . public class PranavSchoolGradeCalculator { ArrayList&lt;Double&gt; grades; public PranavSchoolGradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.grades.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } public double average() { double total = 0; for (double num : this.grades) { total += num; } return (total / this.grades.size()); } public static void main(String[] args) { PranavSchoolGradeCalculator grades = new PranavSchoolGradeCalculator(); System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); } } .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2023/01/22/PranavPrimitiveJupyterPage.html",
            "relUrl": "/2023/01/22/PranavPrimitiveJupyterPage.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2023/01/22/Java-Jupyter-Notebook.html",
            "relUrl": "/2023/01/22/Java-Jupyter-Notebook.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Java ArrayList",
            "content": "Definition . An ArrayList is like an array that has more flexibility, so it can be resized and things can be added and removed after the array is created. No size limit, and it can have duplicate elements. . import java.util.ArrayList; ArrayList&lt;String&gt; matches = new ArrayList&lt;String&gt;(); matches.add(&quot;barcelona&quot;); matches.add(&quot;beat&quot;); matches.add(&quot;real madrid&quot;); matches.add(&quot;4-0&quot;); matches.add(&quot;last&quot;); matches.add(&quot;year&quot;); System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year] . Add and addAll . Adding elements using add(). Can also be added at a certain index if specified. addAll() is used to add all the elements from one array to another. . matches.add(&quot;.&quot;); //adds the ! to the end of the arraylist matches.add(1, &quot;easily&quot;); //adds the word very to the list at index 4 System.out.println(matches); . [barcelona, easily, beat, real madrid, 4-0, last, year, .] . Size . This returns the size of the list by using size(). . ArrayList&lt;String&gt; more_matches = new ArrayList&lt;String&gt;(); more_matches.add(&quot;barcelona&quot;); more_matches.add(&quot;lost&quot;); more_matches.add(&quot;to&quot;); more_matches.add(&quot;liverpool&quot;); more_matches.add(&quot;4-3&quot;); //this is very true matches.addAll(more_matches); //adds the second list to the first one System.out.println(matches); matches.size(); . [barcelona, easily, beat, real madrid, 4-0, last, year, ., barcelona, lost, to, liverpool, 4-3] . 13 . Remove (int index) and (element) . This method remove(), removes an element from the index, it shifts the other elements and decreases index by the amount of elements removed. Can be used by removing the index number or the name of the element. . matches.remove(1); //you can see that the word &quot;are&quot; has been removed System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year, ., barcelona, lost, to, liverpool, 4-3] . matches.remove(&quot;4-3&quot;); matches.remove(&quot;lost&quot;); System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year, ., barcelona, to, liverpool] . Get . The get() method returns elements at the specific index. . matches.get(0); . barcelona . Set . The set() method replaces an element at an index with another element . matches.set(3, new String(&quot;CF&quot;)); System.out.println(matches); . [barcelona, beat, real madrid, CF, last, year, ., barcelona, to, liverpool] . IndexOf . The indexOf() method returns when the element occurs first or -1 if its not there. . matches.indexOf(&quot;barcelona&quot;); . 0 . lastIndexOf(element) . This method returns the index of when the element comes up last, or -1 if its not in the list. . matches.indexOf(&quot;chelsea&quot;); . -1 . hashCode() . Returns the hashcode value of a list, a hashcode is an integer value that corresponds with an object. . matches.hashCode(); . -1011032613 . isEmpty . This method checks if the list is empty or not, and returns true or false if it is empty or not respectively. . matches.isEmpty(); . false . more_matches.isEmpty(); . false . contains(element) . This checks if the list has a certain element, true if it does and false if it doesn&#39;t. . matches.contains(&quot;real madrid&quot;); . true . matches.contains(&quot;inter&quot;); . false . Sort . This method sorts the elements of a list based on a comparator. . import java.util.Collections; System.out.println(&quot;List : &quot;+matches); //will sort the string according to alphabetical order Collections.sort(matches); System.out.println(&quot;Sorted List : &quot;+matches); . List : [barcelona, beat, real madrid, CF, last, year, ., barcelona, to, liverpool] Sorted List : [., CF, barcelona, barcelona, beat, last, liverpool, real madrid, to, year] . matches.clear(); //clears all the elements in list System.out.println(matches); //they&#39;re all gone, how sad . [] .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2023/01/22/Java-ArrayList.html",
            "relUrl": "/2023/01/22/Java-ArrayList.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Vocab List 4",
            "content": "Subclass constructor, super Keyword . Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. | . public class Superclass { public void printMethod() { System.out.println(&quot;Printed in Superclass.&quot;); } } public class Subclass extends Superclass { // overrides printMethod in Superclass public void printMethod() { super.printMethod(); System.out.println(&quot;Printed in Subclass&quot;); } public static void main(String[] args) { Subclass s = new Subclass(); s.printMethod(); } } Subclass.main(null); . Printed in Superclass. Printed in Subclass . Overloading a method, same name different parameters . In Java, two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading. | . // Overloading by changing the number of parameters class MethodOverloading { private static void display(int a){ System.out.println(&quot;Arguments: &quot; + a); } private static void display(int a, int b){ System.out.println(&quot;Arguments: &quot; + a + &quot; and &quot; + b); } public static void main(String[] args) { display(1); display(1, 4); } } MethodOverloading.main(null); . Arguments: 1 Arguments: 1 and 4 . Overriding a method, same signature of a method . Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. | . // method overriding in java // Base Class class Parent { void show() { System.out.println(&quot;Parent&#39;s show()&quot;); } } // Inherited class class Child extends Parent { // This method overrides show() of Parent @Override void show() { System.out.println(&quot;Child&#39;s show()&quot;); } } // Driver class class Main { public static void main(String[] args) { // If a Parent type reference refers // to a Parent object, then Parent&#39;s // show is called Parent obj1 = new Parent(); obj1.show(); // If a Parent type reference refers // to a Child object Child&#39;s show() // is called. This is called RUN TIME // POLYMORPHISM. Parent obj2 = new Child(); obj2.show(); } } Main.main(null); . Parent&#39;s show() Child&#39;s show() . Abstract Class, Abstract Method . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). | Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from). | . //An abstract class can have both abstract and regular methods: abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } } . Standard methods: . toString(): Used to convert an object into a string. | equals(): Useful for comparing two objects to see if they are equal | hashCode(): Useful for getting a unique hash code for an object. | . class toString { public static void main( String args[] ) { //Creating an integer of value 10 Integer number=10; // Calling the toString() method as a function of the Integer variable System.out.println( number.toString() ); } } toString.main(null) . 10 . String myStr1 = &quot;Karthik&quot;; String myStr2 = &quot;Evan&quot;; String myStr3 = &quot;Pranav&quot;; String myStr4 = &quot;Sanjay&quot;; String myStr5 = &quot;Jay&quot;; String myStr6 = &quot;Karthik&quot;; System.out.println(myStr1.equals(myStr6)); // Returns true because they are equal System.out.println(myStr1.equals(myStr4)); // false . true false . /* * Program Demonstrate hashcode() method of Method Class. */ import java.lang.reflect.Method; public class hashCode { // create a Method name getSampleMethod public void getSampleMethod() {} // create main method public static void main(String args[]) { try { // create class object for class name hashCode Class c = hashCode.class; // get Method object of method name getSampleMethod Method method = c.getDeclaredMethod(&quot;getSampleMethod&quot;, null); // get hashcode of method object using hashCode() method int hashCode = method.hashCode(); // Print hashCode with method name System.out.println(&quot;hashCode of method &quot; + method.getName() + &quot; is &quot; + hashCode); } catch (Exception e) { // print if any exception occurs e.printStackTrace(); } } } hashCode.main(null) . hashCode of method getSampleMethod is 49965842 . Late binding of object, referencing superclass object . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. | . public class lateBinding { public static class superclass { void print() { System.out.println(&quot;print in superclass.&quot;); } } public static class subclass extends superclass { @Override void print() { System.out.println(&quot;print in subclass.&quot;); } } public static void main(String[] args) { superclass A = new superclass(); superclass B = new subclass(); A.print(); B.print(); } } lateBinding.main(null) . print in superclass. print in subclass. . Polymorphism: any of overloading, overriding, late binding . Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters. | . abstract class Animal { public void distanceDriven() { System.out.println(&quot;Anima has walked 120 feet&quot;); } } class Dog extends Animal { public void distanceDriven() { System.out.println(&quot;The SUV has driven 70 feet&quot;); } } class Cat extends Animal { public void distanceDriven() { System.out.println(&quot;The truck has driven 60 feet&quot;); } } // Instantiating the Car class would throw an error as it is abstract Dog dog = new Dog(); Cat cat = new Cat(); dog.distanceDriven(); cat.distanceDriven(); . The SUV has driven 70 feet The truck has driven 60 feet . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. | . class Main { public static void main(String[] args) { int a = 0, b = 0; int N = 4, M = 4; // This loop runs for N time for (int i = 0; i &lt; N; i++) { a = a + 10; } // This loop runs for M time for (int i = 0; i &lt; M; i++) { b = b + 40; } System.out.print(a + &quot; &quot; + b); } } Main.main(null) . 40 160 .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/12/01/vocab-(4).html",
            "relUrl": "/2022/12/01/vocab-(4).html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Vocab List 3",
            "content": "- Accessor Methods . A method called an accessor retrieves confidential information that is kept inside an object. An accessor offers a way for other program elements to access an object&#39;s state. . class Student { //Instance variable name private String name; /** getName() example * @return name */ public String getName() { return name; } public static void main(String[] args) { // To call a get method, use objectName.getVarName() Student s = new Student(); System.out.println(&quot;Name: MasterCoder &quot; + s.getName() ); } } Student.main(null) . Name: MasterCoder null . - Mutator Methods . A technique used to regulate changes to a variable is known as a mutator method. They&#39;re also frequently referred to as setter methods. A getter, often referred to as an accessor, frequently follows a setter and returns the value of the private member variable. . import java.math.BigDecimal; public class Product { private BigDecimal price; private String name; public BigDecimal getPrice() { return price; } public String getName() { return name; } // mutator or setter methods public void setPrice(BigDecimal price) { if(price.compareTo(BigDecimal.ZERO)&lt;0 )throw new IllegalArgumentException(&quot;Empty product name&quot;); this.price = price; } public void setName(String name) { if(name.isEmpty()) throw new IllegalArgumentException(&quot;Empty product name&quot;); this.name = name; } } . - Static, Class Variables . All instances of a class share static variables, which are variables. This implies that no matter how many instances of the same class of objects you create, changing a static variable or method will update it for all of them. This is helpful if you want to increment a counter for each instance of a class, for example. . class VariableDemo { static int count=0; public void increment() { count++; } public static void main(String args[]) { VariableDemo obj1=new VariableDemo(); VariableDemo obj2=new VariableDemo(); obj1.increment(); obj2.increment(); System.out.println(&quot;Obj1: count is=&quot;+obj1.count); System.out.println(&quot;Obj2: count is=&quot;+obj2.count); } } VariableDemo.main(null) . Obj1: count is=2 Obj2: count is=2 . public class VariableExample{ int myVariable; static int data = 30; public static void main(String args[]){ int a = 100; VariableExample obj = new VariableExample(); System.out.println(&quot;Value of instance variable myVariable: &quot;+obj.myVariable); System.out.println(&quot;Value of static variable data: &quot;+VariableExample.data); System.out.println(&quot;Value of local variable a: &quot;+a); } } VariableExample.main(null) . Value of instance variable myVariable: 0 Value of static variable data: 30 Value of local variable a: 100 . - Public, Private, Protected . public: available to everyone. protected: open to subclasses in any package as well as classes belonging to the same package. default, indicating that no modifiers are specified: accessible by classes belonging to the same package. private: only available to members of the same class. . public class Addition { public int addTwoNumbers(int a, int b){ return a+b; } } class Test{ public static void main(String args[]){ Addition obj = new Addition(); System.out.println(obj.addTwoNumbers(100, 1)); } } Test.main(null) . 101 . class Data { private String name; // getter method public String getName() { return this.name; } // setter method public void setName(String name) { this.name= name; } } public class Main { public static void main(String[] main){ Data d = new Data(); // access the private variable using the getter and setter d.setName(&quot;Mortensen&quot;); System.out.println(d.getName()); } } Main.main(null) . Mortensen . public class Addition { protected int addTwoNumbers(int a, int b){ return a+b; } } class Test extends Addition{ public static void main(String args[]){ Test obj = new Test(); System.out.println(obj.addTwoNumbers(11, 22)); } } . - Static, Class Methods . A static method is a method that is declared as a member of an object but can only be accessed from the constructor of an API object rather than from an instance of the object generated by the constructor. Class methods, on the other hand, are methods that are invoked on the class as a whole rather than on a single object instance. As a result, it falls under the class level, and the class method is shared by all class instances. A class method is linked to the class itself, not to any class objects. Only class variables are accessible to it. . public class StaticExample { public static int x; public static void main(String[] args) { x += 7; System.out.println(&quot;Add 7. Result: &quot; + x); } } StaticExample se = new StaticExample(); se.main(null); . Add 7. Result: 7 . - &quot;this Keyword&quot; . In a method or constructor, the &quot;this keyword&quot; refers to the current object. As a class attribute is shadowed by a method or constructor argument, the this keyword is most frequently used to clarify the differences between class attributes and parameters with the same name. . class A{ A(){ this(5); System.out.println(&quot;hello world&quot;); } A(int x){ System.out.println(x); } } class TestThis6{ public static void main(String args[]){ A a=new A(); }} . - &quot;main method&quot; . As the starting point for running a Java program, the main method in Java is typically the first method you encounter when learning how to program in Java. The main method can be located in any class that is a part of a program and can contain code to run or call other methods. . // Extends static example and modifies x value public class ExtendsExample extends StaticExample { public static void main(String[] args) { x += 10232; System.out.println(&quot;Add 10232. Result: &quot; + x); } } ExtendsExample ee = new ExtendsExample(); ee.main(null); . Add 10232. Result: 10239 . - Inherticance, Extends . It can inherit properties and methods from the class it is extending by using an extends method. When you want to alter or add to an existing class without having to completely rewrite the code for the class you are extending, this is helpful. . public class Cat extends Animal{ private String color; public Cat(boolean veg, String food, int legs) { super(veg, food, legs); this.color=&quot;White&quot;; } public Cat(boolean veg, String food, int legs, String color){ super(veg, food, legs); this.color=color; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } public class AnimalInheritanceTest { public static void main(String[] args) { Cat cat = new Cat(false, &quot;milk&quot;, 4, &quot;black&quot;); System.out.println(&quot;Cat is Vegetarian?&quot; + cat.isVegetarian()); System.out.println(&quot;Cat color is &quot; + cat.getColor()); } } AnimalInheritanceTest.main(null) . Cat is Vegetarian?false Cat color is black .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/homework/2022/12/01/vocab-(3).html",
            "relUrl": "/homework/2022/12/01/vocab-(3).html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Vocab List 2",
            "content": "Comparing Numbers . To check two numbers for equality in Java, we can use the Equals() method as well as the == operator. | Firstly, let us set Integers. Integer val1 = new Integer(5); Integer val2 = new Integer(5); Now, to check whether they are equal or not, let us use the == operator. | . public class Example { public static void main(String[] args) { int x = 20; int y = 23; if(x==y) { System.out.println(&quot;Both are equal&quot;); } else { System.out.println(&quot;x and y are not equal&quot;); } } } . Comparing Strings . The == operator, known as the equality operator, is used to compare two strings in Java. | Using user-defined function : Define a function to compare values with following conditions : if (string1 &gt; string2) it returns a positive value. | if both the strings are equal lexicographically | i.e.(string1 == string2) it returns 0. | if (string1 &lt; string2) it returns a negative value. | . | . public class StringComp { public static void main(String[] args) { String s1 = &quot;hello&quot;; String s2 = &quot;hello&quot;; String s3 = new String(&quot;hello&quot;); System.out.println(s1 ==s2); System.out.println(s1 ==s3); } } . Comparing Objects . Comparing objects is an essential feature of object-oriented programming languages. | By comparing two objects, the value of those objects isn&#39;t 1. Rather, it&#39;s their memory addresses in the stack that are different, since both objects are created using the new operator. If we assigned a to b, then we would have a different result | In Java, the == operator compares that two references are identical or not. Whereas the equals() method compares two objects. | . public class Netflix { public static void main(String[] args) { String s1 = &quot;name&quot;; String s2 = &quot;name&quot;; if(s1 == (s2)) { System.out.println(s1); } } } . For Loop . A for loop is a repetition control structure that allows you to efficiently write a loop that needs to be executed a specific number of times. | A for loop is useful when you know how many times a task is to be repeated. | . public class Vehicles { public static void main(String[] args) { String[] cars = {&quot;Audi&quot;, &quot;BMW&quot;, &quot;Nissan&quot;}; for(String car : cars); } } . While Loop . The Java while loop is used to iterate a part of the program repeatedly until the specified Boolean condition is true. | As soon as the Boolean condition becomes false, the loop automatically stops. | The while loop is considered as a repeating if statement. | . class WhileLoop { public static void main(String[] args) { int i = 1; while(i &lt;= 6) { System.out.println(i); i++; } } } . Nested Loops . A nested loop is a (inner) loop that appears in the loop body of another (outer) loop. | The inner or outer loop can be any type: while, do while, or for. | For example, the inner loop can be a while loop while an outer loop can be a for loop. | . for (int i = 0; i &lt; 3; i++) { for(int j = 0; j &lt; 2; j++) System.out.println(i + &quot; &quot; + j); System.out.println(); } . 0 0 0 1 1 0 1 1 2 0 2 1 . How to Create a Class . Everything in Java is associated with classes and objects, along with its attributes and methods. | For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. | A Class is like an object constructor, or a &quot;blueprint&quot; for creating objects. | Classes are required in OOPs because: It provides template for creating objects, which can bind code into data. | It has definitions of methods and data. It supports inheritance property of Object Oriented Programming and hence can maintain class hierarchy. | . Constructor . A constructor in Java is a special method that is used to initialize objects. | The constructor is called when an object of a class is created. | In Java, constructors can be divided into 3 types: No-Arg Constructor. Parameterized Constructor. Default Constructor. | . public String getName() { return name; } public static void main(String[] args) { Data d = new Data(&quot;Java&quot;); System.out.println(d.getName()); } .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/12/01/vocab-(2).html",
            "relUrl": "/2022/12/01/vocab-(2).html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Vocab List 1",
            "content": "Casting . Below, there are two examples of casting. Both examples convert a double data type to integer via truncation. 1.511 is outputted as 1 in the first line. 28.2 is printed as 28 in the second line. This can simplify the output and make it easier to operate on in future code as well. . double d1 = 6.53; double d2 = 4.32; // Casting for division int dd = (int) (d1/d2); // Casting for multiplication int md = (int) (d1*d2); System.out.println(dd); // output of division, is integer System.out.println(md); // output of multiplication, is integer . 1 28 . Wrapper Classes . Wrapper class allow the use of primitive data types like integers as classes, and therefore use methods and code that otherwise would not be allowed. Below, the toString method can not be used with the primitive, but works with the wrapper. . int i = 1; Integer ii = 1; // String unwrapped = i.toString(); String wrapped = ii.toString(); System.out.println(i); System.out.println(ii); . | String unwrapped = i.toString(); int cannot be dereferenced . Concatenation . Concatenation is combinining two or more strings. . String s1 = &quot;hello&quot;; String s2 = &quot;world&quot;; String conc = s1.concat(s2); System.out.println(s1+ &quot; &quot; + s2); System.out.println(conc); System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + 12); . hello world helloworld hello world 12 . Math Class . Allows math operations. Absolute value and random. . int ex = -1; System.out.println(Math.abs(-1)); // random between 1 and 10 System.out.println((int)(Math.random() * (100-10) + 10)); System.out.println((Math.random() * (10-1) + 1)); . 1 27 2.393138714397412 . Compound Boolean Expression . Compound boolean expressions are when multiple boolean expressions are nested within each other. . boolean a = true; boolean b = false; System.out.println(!a &amp;&amp; !b); . false . Truth Tables . Help visualize compound boolean expressions and make it easier to evaluate. . DeMorgans Law . Make boolean expressions easier. . boolean a = true; boolean b = false; System.out.println(!(a&amp;&amp;b)); System.out.println(!a || !b); System.out.println(!(a||b)); System.out.println(!a &amp;&amp; !b); . true true false false .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/12/01/vocab-(1).html",
            "relUrl": "/2022/12/01/vocab-(1).html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "AP CSA Test Corrections",
            "content": "Question 4 . . Answer B Incorrect. This would be the result if the division used was floating point division, instead of integer division. This would be the case if either x or y were of type double instead of type int or if either value was typecast as a double in the expression. | Answer C Correct. When we evaluate the express(x &lt; 10) &amp;&amp; (y &lt; 0) for x having the value 7 and y having the value 3, x &lt; 10 evaluates to true, since 7 is less than 10, and y &lt; 0 evaluates to false, since 3 is not less than 0. The logic operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. Since the second condition is false, the boolean expression is false. As a result, the compiler will skip the first output statement and execute the statement in the else. The expression x / y is integer division for 7 / 3, which is 2. | This was more of a conceptual error as I didn’t read the code segment thoroughly resulting in the wrong output being displayed when I looked at it. | . Question 11 . . Answer A Incorrect. This will prevent an ArrayIndexOutOfBoundsException from being thrown if target does not appear in data, however if target is at element 0, -1 will be returned instead of 0 as intended. | Answer B Correct. The seqSearchRecHelper recursive method does not work as intended when target does not appear in data. In this case, when last becomes -1, the method will throw an ArrayIndexOutOfBoundsException in the first if statement after line 1. To prevent this, we should add a check to see if last is less than 0 and if it is, return -1 as expected. | I did this wrong because if you look at the function, the main target wasn’t displaying the correct output. | . Question 18 . . Answer D Incorrect. The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Adding 1 to myList.size() and then multiplying Math.random() by this value results in a range that is from 0 to myList.size(), which is one element too many. | Answer B Correct. The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Using Math.random()generates a random floating point number between 0 and 1, not including 1. When this value is multiplied by the number of elements we want in our range, myList.size(), a random floating point number between 0 and myList.size(), not including myList.size(), is generated. When this value is typecast as an int, the result is an integer value between 0 and myList.size() – 1 inclusive. | In order to get this correct in the future, I plan on studying both topic 2.9 and 7.2 as they cover Arraylists. | . Question 23 . . Answer C Incorrect. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the correct answer if the remove occurred before the size was calculated in the statement animals.add(animals.size()-k, animals.remove(k)); and only one iteration of the loop occurred. | Answer B Correct. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. | To fix this I will focus on topics 2.7 and 7.4 as they cover instatizing and initializing lists. | . Question 24 . . Answer C Incorrect. The value 5 is at newArray[1][1]. | Answer D Correct. The enhanced for loop iterates over the array oldArray. In the first iteration, newArray[0][0] is assigned the value 1. The value of row is incremented to 1. Since 1 % 3 does not equal 0, the statements in the if are not executed. In the next iteration, newArray[1][0] is assigned the value 2. The value of row is incremented to 2. The algorithm continues to fill column 0 with the subsequent values of oldArray. Once row is 3, the if condition is true and row is assigned 0 and col is incremented to 1. The algorithm proceeds to fill column 1. | Resources: 8.1: Daily Video 1 (Skill 3.E), 8.1: Daily Video 2 (Skill 3.E), 8.1: Daily Video 3 (Skill 1.B) | . Question 34 . . Answer D Incorrect. Choice III uses the default Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | Answer B Correct. Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. | There is a compiling error that comes out of the answer in option D due to the way in which the constructor assigns a new point. | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/11/08/Test-Corrections.html",
            "relUrl": "/markdown/2022/11/08/Test-Corrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "N@TM Blog",
            "content": "| | | | After going to the N@TM event, there were many takeaways I had Firstly, many of the viewers(both parents and students) loved our interactive quiz due to the elaborate bank of questions we implemented and the styling on the page | We also received some feedback from peers to help us make our votes page look nicer, and also were given suggestions on what future pages we can implenet in our project from now on | Overall, I had a great time at the event and I hope to have a successful second trimester and become an overall better coder and student in AP CSA. | . | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/11/08/N@TM-Blog.html",
            "relUrl": "/markdown/2022/11/08/N@TM-Blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 7 2018 HW",
            "content": "2. This question involves reasoning about pairs of words that are represented by the following . public class WordPair . { . /* Constructs a WordPair object. / . public WordPair(String first, String second) . { / implementation not shown / } . /* Returns the first string of this WordPair object. / . public String getFirst() . { / implementation not shown / } . /* Returns the second string of this WordPair object. / . public String getSecond() . { / implementation not shown / } . } . WordPair class. . 2. You will implement the constructor and another method for the following WordPairList class. . public class WordPairList . { . /* The list of word pairs, initialized by the constructor. / . private ArrayList allPairs;&lt;/p&gt; /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 . */ . public WordPairList(String[] words) . { / to be implemented in part (a) / } . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . { / to be implemented in part (b) / } . } . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (a) Write the constructor for the WordPairList class. The constructor takes an array of strings words as . a parameter and initializes the instance variable allPairs to an ArrayList of WordPair objects. A WordPair object consists of a word from the array paired with a word that appears later in the array. The allPairs list contains WordPair objects (words[i], words[j]) for every i and j, where 0 £ i &lt; j &lt; words.length . Each WordPair object is added exactly once to the list. The following examples illustrate two different WordPairList objects. . . Complete the WordPairList constructor below. . /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 */ public WordPairList(String[] words) | . public class WordPairList { public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for(int i = 0; i &lt; words.length; i++) for(int j = i + 1; j &lt; words.length; j++) allPairs.add(new WordPair(words[i], words[j])); } } . (2b) . Write the WordPairList method numMatches. This method returns the number of WordPair objects in allPairs for which the two strings match. For example, the following code segment creates a WordPairList object. . String[] moreWords = {&quot;the&quot;, &quot;red&quot;, &quot;fox&quot;, &quot;the&quot;, &quot;red&quot;}; . WordPairList exampleThree = new WordPairList(moreWords); . After the code segment has executed, the allPairs instance variable of exampleThree will contain the following WordPair objects in some order. The pairs in which the first string matches the second string are shaded for illustration. . (&quot;the&quot;, &quot;red&quot;), (&quot;the&quot;, &quot;fox&quot;), (&quot;the&quot;, &quot;the&quot;), . (&quot;the&quot;, &quot;red&quot;), (&quot;red&quot;, &quot;fox&quot;), (&quot;red&quot;, &quot;the&quot;), . (&quot;red&quot;, &quot;red&quot;), (&quot;fox&quot;, &quot;the&quot;), (&quot;fox&quot;, &quot;red&quot;), . (&quot;the&quot;, &quot;red&quot;) . The call exampleThree.numMatches() should return 2. . . Complete method numMatches below. . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . public int numMatches() { int matches = 0; for(WordPair wp : allPairs) if(wp.getFirst().equals(wp.getSecond())) matches++; return matches; } . &lt;/div&gt; .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/homework/2022/10/27/Unit-7-HW.html",
            "relUrl": "/homework/2022/10/27/Unit-7-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 6 Homework",
            "content": "Hack 1 . How do we access the even numbers in arrayOne from above? . import java.util.Arrays; int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i&lt;arrayOne.length;i++) { if (arrayOne[i] % 2 == 0) { System.out.println(arrayOne[i] + &quot; &quot;); } } . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . B . APCSA 2021 Question 3 . A high school club maintains information about its members in a MemberInfo object. A MemberInfo object stores a club member’s name, year of graduation, and whether or not the club member is in good standing. A member who is in good standing has fulfilled all the responsibilities of club membership. . A partial declaration of the MemberInfo class is shown below. . public class MemberInfo { / Constructs a MemberInfo object for the club member with name name, graduation year gradYear, and standing hasGoodStanding. / public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { / implementation not shown */ } / Returns the graduation year of the club member. / public int getGradYear() { / implementation not shown / } /** Returns true if the member is in good standing and false otherwise. / public boolean inGoodStanding() { / implementation not shown / } // There may be instance variables, constructors, and methods that are not shown. } | . | The ClubMembers class maintains a list of current club members. The declaration of the ClubMembers class is shown below. . public class ClubMembers { private ArrayList memberList; / Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array. / public void addMembers(String[] names, int gradYear) { / to be implemented in part (a) */ } / Removes members who have graduated and returns a list of members who have graduated and are in good standing, as described in part (b). / public ArrayList removeMembers(int year) { /&lt;/em&gt; to be implemented in part (b) */ } // There may be instance variables, constructors, and methods that are not shown. } &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (A) . Write the ClubMembers method addMembers, which takes two parameters. The first parameter is a String array containing the names of new club members to be added. The second parameter is the graduation year of all the new club members. The method adds the new members to the memberList instance variable. The names can be added in any order. All members added are initially in good standing and share the same graduation year, gradYear. . Complete the addMembers method. . /* Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array./ . public void addMembers(String[] names, int gradYear) . public void addMembers(String[] names, int gradYear) { for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . &lt;/div&gt; | . | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/homework/2022/10/25/Unit-6-HW.html",
            "relUrl": "/homework/2022/10/25/Unit-6-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 5 2019 FRQ Q2",
            "content": "2. . This question involves the implementation of a fitness tracking system that is represented by the StepTracker class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. The StepTracker class provides a constructor and the following methods. . addDailySteps, which accumulates information about steps, in readings taken once per day | activeDays, which returns the number of active days | averageSteps, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked | . The following table contains a sample code execution sequence and the corresponding results. . . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { private final int minStepsActive; private int activeDays; private int days; private int totalSteps; public StepTracker(int minStepsActive) { this.minStepsActive = minStepsActive; activeDays = 0; days = 0; totalSteps = 0; } public void addDailySteps(int steps) { if(steps &gt;= minStepsActive) activeDays++; days++; totalSteps += steps; } public int activeDays() { return activeDays; } public double averageSteps() { if(days == 0) return 0; return totalSteps / (double) days; } } .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/homework/2022/10/25/Unit-5-FRQ.html",
            "relUrl": "/homework/2022/10/25/Unit-5-FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 4 Homework",
            "content": "Reference Vocab list 3, for better understanding of strings | . // import required classes and package, if any import java.util.Scanner; // create class CaesarCipherExample for encryption and decryption public class CaesarCipherExample { // ALPHABET string denotes alphabet from a-z public static final String ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;; // create encryptData() method for encrypting user input string with given shift key public static String encryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // encryptStr to store encrypted data String encryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get encrypted char for each char of inputStr int encryptPos = (shiftKey + pos) % 26; char encryptChar = ALPHABET.charAt(encryptPos); // add encrypted char to encrypted string encryptStr += encryptChar; } // return encrypted string return encryptStr; } // create decryptData() method for decrypting user input string with given shift key public static String decryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // decryptStr to store decrypted data String decryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get decrypted char for each char of inputStr int decryptPos = (pos - shiftKey) % 26; // if decryptPos is negative if (decryptPos &lt; 0){ decryptPos = ALPHABET.length() + decryptPos; } char decryptChar = ALPHABET.charAt(decryptPos); // add decrypted char to decrypted string decryptStr += decryptChar; } // return decrypted string return decryptStr; } // main() method start public static void main(String[] args) { // create an instance of Scanner class Scanner sc = new Scanner(System.in); // take input from the user System.out.println(&quot;Enter a string for encryption using Caesar Cipher: &quot;); String inputStr = sc.nextLine(); System.out.println(&quot;Enter the value by which each character in the plaintext message gets shifted: &quot;); int shiftKey = Integer.valueOf(sc.nextLine()); System.out.println(&quot;Encrypted Data ===&gt; &quot;+encryptData(inputStr, shiftKey)); System.out.println(&quot;Decrypted Data ===&gt; &quot;+decryptData(encryptData(inputStr, shiftKey), shiftKey)); // close Scanner class object sc.close(); } } CaesarCipherExample.main(null) . Enter a string for encryption using Caesar Cipher: Enter the value by which each character in the plaintext message gets shifted: Encrypted Data ===&gt; lipps Decrypted Data ===&gt; hello .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "relUrl": "/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 3 - Java Practice Programs",
            "content": "1. Write a Java program to get a number from the user and print whether it is positive or negative. . import java.util.Scanner; public class Exercise1 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int input = in.nextInt(); if (input &gt; 0) { System.out.println(&quot;Number is positive&quot;); } else if (input &lt; 0) { System.out.println(&quot;Number is negative&quot;); } else { System.out.println(&quot;Number is zero&quot;); } } } Exercise1.main(null); . Input number: . java.util.InputMismatchException: null at java.base/java.util.Scanner.throwFor(Scanner.java:943) at java.base/java.util.Scanner.next(Scanner.java:1598) at java.base/java.util.Scanner.nextInt(Scanner.java:2263) at java.base/java.util.Scanner.nextInt(Scanner.java:2217) at Exercise1.main(#13:1) at .(#40:1) . 2. Write a Java program to solve quadratic equations (use if, else if and else). . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The equation has no real roots. . 3. Take three numbers from the user and print the greatest number. . Reference Vocab List 2, to get a better understanding of comparing objects, numbers, and strings | . import java.util.Scanner; public class Exercise3 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the 1st number: &quot;); int num1 = in.nextInt(); System.out.print(&quot;Input the 2nd number: &quot;); int num2 = in.nextInt(); System.out.print(&quot;Input the 3rd number: &quot;); int num3 = in.nextInt(); if (num1 &gt; num2) if (num1 &gt; num3) System.out.println(&quot;The greatest: &quot; + num1); if (num2 &gt; num1) if (num2 &gt; num3) System.out.println(&quot;The greatest: &quot; + num2); if (num3 &gt; num1) if (num3 &gt; num2) System.out.println(&quot;The greatest: &quot; + num3); } } Exercise3.main(null); . Input the 1st number: Input the 2nd number: Input the 3rd number: The greatest: 3 . 4.Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 5. Write a Java program that keeps a number from the user and generates an integer between 1 and 7 and displays the name of the weekday. . import java.util.Scanner; public class Exercise5 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int day = in.nextInt(); System.out.println(getDayName(day)); } // Get the name for the Week public static String getDayName(int day) { String dayName = &quot;&quot;; switch (day) { case 1: dayName = &quot;Monday&quot;; break; case 2: dayName = &quot;Tuesday&quot;; break; case 3: dayName = &quot;Wednesday&quot;; break; case 4: dayName = &quot;Thursday&quot;; break; case 5: dayName = &quot;Friday&quot;; break; case 6: dayName = &quot;Saturday&quot;; break; case 7: dayName = &quot;Sunday&quot;; break; default:dayName = &quot;Invalid day range&quot;; } return dayName; } } Exercise5.main(null); . Input number: Saturday . 6. Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 7. Write a Java program to find the number of days in a month. . import java.util.Scanner; public class Exercise7 { public static void main(String[] strings) { Scanner input = new Scanner(System.in); int number_Of_DaysInMonth = 0; String MonthOfName = &quot;Unknown&quot;; System.out.print(&quot;Input a month number: &quot;); int month = input.nextInt(); System.out.print(&quot;Input a year: &quot;); int year = input.nextInt(); switch (month) { case 1: MonthOfName = &quot;January&quot;; number_Of_DaysInMonth = 31; break; case 2: MonthOfName = &quot;February&quot;; if ((year % 400 == 0) || ((year % 4 == 0) &amp;&amp; (year % 100 != 0))) { number_Of_DaysInMonth = 29; } else { number_Of_DaysInMonth = 28; } break; case 3: MonthOfName = &quot;March&quot;; number_Of_DaysInMonth = 31; break; case 4: MonthOfName = &quot;April&quot;; number_Of_DaysInMonth = 30; break; case 5: MonthOfName = &quot;May&quot;; number_Of_DaysInMonth = 31; break; case 6: MonthOfName = &quot;June&quot;; number_Of_DaysInMonth = 30; break; case 7: MonthOfName = &quot;July&quot;; number_Of_DaysInMonth = 31; break; case 8: MonthOfName = &quot;August&quot;; number_Of_DaysInMonth = 31; break; case 9: MonthOfName = &quot;September&quot;; number_Of_DaysInMonth = 30; break; case 10: MonthOfName = &quot;October&quot;; number_Of_DaysInMonth = 31; break; case 11: MonthOfName = &quot;November&quot;; number_Of_DaysInMonth = 30; break; case 12: MonthOfName = &quot;December&quot;; number_Of_DaysInMonth = 31; } System.out.print(MonthOfName + &quot; &quot; + year + &quot; has &quot; + number_Of_DaysInMonth + &quot; days n&quot;); } } Exercise7.main(null); . Input a month number: Input a year: August 2005 has 31 days . 8. Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message. . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Vowel . 9. Write a Java program that takes a year from user and print whether that year is a leap year or not. . import java.util.Scanner; public class Exercise9 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the year: &quot;); int year = in.nextInt(); boolean x = (year % 4) == 0; boolean y = (year % 100) != 0; boolean z = ((year % 100 == 0) &amp;&amp; (year % 400 == 0)); if (x &amp;&amp; (y || z)) { System.out.println(year + &quot; is a leap year&quot;); } else { System.out.println(year + &quot; is not a leap year&quot;); } } } Exercise9.main(null); . Input the year: 2022 is not a leap year . 10. Write a program in Java to display the first 10 natural numbers. . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 11. Write a program in Java to display n terms of natural numbers and their sum. . import java.util.Scanner; public class Exercise11 { public static void main(String[] args) { int i, n, sum=0; { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); n = in.nextInt(); } System.out.println(&quot;The first n natural numbers are : &quot;+n); for(i=1;i&lt;=n;i++) { System.out.println(i); sum+=i; } System.out.println(&quot;The Sum of Natural Number upto &quot;+n+ &quot; terms : &quot; +sum); } } Exercise11.main(null); . Input number: The first n natural numbers are : 4 1 2 3 4 The Sum of Natural Number upto 4 terms : 10 . 12. Write a program in Java to input 5 numbers from keyboard and find their sum and average . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 15 The Average is : 3.0 . 13. Write a program in Java to display the cube of the number upto given an integer. . import java.util.Scanner; public class Exercise13 { public static void main(String[] args) { int i,n; System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { System.out.println(&quot;Number is : &quot; +i+&quot; and cube of &quot; +i+&quot; is : &quot;+(i*i*i)); } } } Exercise13.main(null); . Input number of terms : Number is : 1 and cube of 1 is : 1 Number is : 2 and cube of 2 is : 8 Number is : 3 and cube of 3 is : 27 Number is : 4 and cube of 4 is : 64 Number is : 5 and cube of 5 is : 125 . 14. Write a program in Java to display the multiplication table of a given integer. . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . 15. Write a program in Java to display the n terms of odd natural number and their sum. . import java.util.Scanner; public class Exercise15 { public static void main(String[] args) { int i,n,sum=0; System.out.print(&quot;Input number of terms is: &quot;); { Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; nThe odd numbers are :&quot;); for(i=1;i&lt;=n;i++) { System.out.println (2*i-1); sum+=2*i-1; } System.out.println (&quot;The Sum of odd Natural Number upto &quot; +n+&quot; terms is: &quot; +sum); } } } Exercise15.main(null); . 16. Write a program in Java to display the pattern like right angle triangle with a number. . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . 17. Write a program in Java to make such a pattern like right angle triangle with a number which will repeat a number in a row.The pattern is as follows : . import java.util.Scanner; public class Exercise17 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of n : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(i); System.out.println(&quot;&quot;); } } } Exercise17.main(null); . 18. Write a program in Java to make such a pattern like right angle triangle with number increased by 1.The pattern like : . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . 19. Write a program in Java to make such a pattern like a pyramid with a number which will repeat the number in the same row. . import java.util.Scanner; public class Exercise19 { public static void main(String[] args) { int i,j,n,s,x; System.out.print (&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); s=n+4-1; for(i=1;i&lt;=n;i++) { for(x=s;x!=0;x--) { System.out.print(&quot; &quot;); } for(j=1;j&lt;=i;j++) { System.out.print(i+&quot; &quot;); } System.out.println(); s--; } } } Exercise19.main(null); . 20. Write a program in Java to print the Floyd&#39;s Triangle. . import java.util.Scanner; public class Main { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Main.main(null); .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/10/25/Unit-3-JavaExercises-(1).html",
            "relUrl": "/2022/10/25/Unit-3-JavaExercises-(1).html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 3 - FRQ Practice Question 1",
            "content": "1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition: The date represented by month, day, year is a valid date. / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . 1(a) . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2 inclusive. In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) | . public static int numberOfLeapYears(int year1, int year2) { int leapYears = 0; for(int y = year1; y &lt;= year2; y++) if(isLeapYear(y)) leapYears++; return leapYears; } . 1. . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . 1(b) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. | . public static int dayOfWeek(int month, int day, int year) . public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; if(weekday == 7) weekday = 0; } return weekday; } . A for loop is a repetition control structure that allows you to efficiently write a loop that needs to be executed a specific number of times. | A for loop is useful when you know how many times a task is to be repeated. | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/10/25/Unit-3-2019FRQ.html",
            "relUrl": "/2022/10/25/Unit-3-2019FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Pranav Java API",
            "content": "%%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20190722&lt;/version&gt; &lt;/dependency&gt; . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Scanner; public class NBA { public static void main(String[] args) throws IOException, InterruptedException { HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://free-nba.p.rapidapi.com/players?page=0&amp;per_page=25&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a52c00a742mshc6c13b49056f1c7p11b54cjsnc5e7c51a6001&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;free-nba.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } NBA.main(null); . {&#34;data&#34;:[{&#34;id&#34;:14,&#34;first_name&#34;:&#34;Ike&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Anigbogu&#34;,&#34;position&#34;:&#34;C&#34;,&#34;team&#34;:{&#34;id&#34;:12,&#34;abbreviation&#34;:&#34;IND&#34;,&#34;city&#34;:&#34;Indiana&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Central&#34;,&#34;full_name&#34;:&#34;Indiana Pacers&#34;,&#34;name&#34;:&#34;Pacers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:25,&#34;first_name&#34;:&#34;Ron&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Baker&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:20,&#34;abbreviation&#34;:&#34;NYK&#34;,&#34;city&#34;:&#34;New York&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Atlantic&#34;,&#34;full_name&#34;:&#34;New York Knicks&#34;,&#34;name&#34;:&#34;Knicks&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:47,&#34;first_name&#34;:&#34;Jabari&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Bird&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:2,&#34;abbreviation&#34;:&#34;BOS&#34;,&#34;city&#34;:&#34;Boston&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Atlantic&#34;,&#34;full_name&#34;:&#34;Boston Celtics&#34;,&#34;name&#34;:&#34;Celtics&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:67,&#34;first_name&#34;:&#34;MarShon&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Brooks&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:15,&#34;abbreviation&#34;:&#34;MEM&#34;,&#34;city&#34;:&#34;Memphis&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Southwest&#34;,&#34;full_name&#34;:&#34;Memphis Grizzlies&#34;,&#34;name&#34;:&#34;Grizzlies&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:71,&#34;first_name&#34;:&#34;Lorenzo&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Brown&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:28,&#34;abbreviation&#34;:&#34;TOR&#34;,&#34;city&#34;:&#34;Toronto&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Atlantic&#34;,&#34;full_name&#34;:&#34;Toronto Raptors&#34;,&#34;name&#34;:&#34;Raptors&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:90,&#34;first_name&#34;:&#34;Omri&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Casspi&#34;,&#34;position&#34;:&#34;F&#34;,&#34;team&#34;:{&#34;id&#34;:15,&#34;abbreviation&#34;:&#34;MEM&#34;,&#34;city&#34;:&#34;Memphis&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Southwest&#34;,&#34;full_name&#34;:&#34;Memphis Grizzlies&#34;,&#34;name&#34;:&#34;Grizzlies&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:1,&#34;first_name&#34;:&#34;Alex&#34;,&#34;height_feet&#34;:6,&#34;height_inches&#34;:6,&#34;last_name&#34;:&#34;Abrines&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:21,&#34;abbreviation&#34;:&#34;OKC&#34;,&#34;city&#34;:&#34;Oklahoma City&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Northwest&#34;,&#34;full_name&#34;:&#34;Oklahoma City Thunder&#34;,&#34;name&#34;:&#34;Thunder&#34;},&#34;weight_pounds&#34;:200},{&#34;id&#34;:119,&#34;first_name&#34;:&#34;Tyler&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Davis&#34;,&#34;position&#34;:&#34;C&#34;,&#34;team&#34;:{&#34;id&#34;:21,&#34;abbreviation&#34;:&#34;OKC&#34;,&#34;city&#34;:&#34;Oklahoma City&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Northwest&#34;,&#34;full_name&#34;:&#34;Oklahoma City Thunder&#34;,&#34;name&#34;:&#34;Thunder&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:149,&#34;first_name&#34;:&#34;Keenan&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Evans&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:9,&#34;abbreviation&#34;:&#34;DET&#34;,&#34;city&#34;:&#34;Detroit&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Central&#34;,&#34;full_name&#34;:&#34;Detroit Pistons&#34;,&#34;name&#34;:&#34;Pistons&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:179,&#34;first_name&#34;:&#34;Marcin&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Gortat&#34;,&#34;position&#34;:&#34;C&#34;,&#34;team&#34;:{&#34;id&#34;:13,&#34;abbreviation&#34;:&#34;LAC&#34;,&#34;city&#34;:&#34;LA&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Pacific&#34;,&#34;full_name&#34;:&#34;LA Clippers&#34;,&#34;name&#34;:&#34;Clippers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:1593,&#34;first_name&#34;:&#34;Andrew&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Bogut&#34;,&#34;position&#34;:&#34;F&#34;,&#34;team&#34;:{&#34;id&#34;:10,&#34;abbreviation&#34;:&#34;GSW&#34;,&#34;city&#34;:&#34;Golden State&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Pacific&#34;,&#34;full_name&#34;:&#34;Golden State Warriors&#34;,&#34;name&#34;:&#34;Warriors&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:241,&#34;first_name&#34;:&#34;Amir&#34;,&#34;height_feet&#34;:6,&#34;height_inches&#34;:9,&#34;last_name&#34;:&#34;Johnson&#34;,&#34;position&#34;:&#34;C-F&#34;,&#34;team&#34;:{&#34;id&#34;:23,&#34;abbreviation&#34;:&#34;PHI&#34;,&#34;city&#34;:&#34;Philadelphia&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Atlantic&#34;,&#34;full_name&#34;:&#34;Philadelphia 76ers&#34;,&#34;name&#34;:&#34;76ers&#34;},&#34;weight_pounds&#34;:240},{&#34;id&#34;:392,&#34;first_name&#34;:&#34;Malachi&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Richardson&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:29,&#34;abbreviation&#34;:&#34;UTA&#34;,&#34;city&#34;:&#34;Utah&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Northwest&#34;,&#34;full_name&#34;:&#34;Utah Jazz&#34;,&#34;name&#34;:&#34;Jazz&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:281,&#34;first_name&#34;:&#34;Zach&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Lofton&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:9,&#34;abbreviation&#34;:&#34;DET&#34;,&#34;city&#34;:&#34;Detroit&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Central&#34;,&#34;full_name&#34;:&#34;Detroit Pistons&#34;,&#34;name&#34;:&#34;Pistons&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:263,&#34;first_name&#34;:&#34;Kosta&#34;,&#34;height_feet&#34;:7,&#34;height_inches&#34;:0,&#34;last_name&#34;:&#34;Koufos&#34;,&#34;position&#34;:&#34;C&#34;,&#34;team&#34;:{&#34;id&#34;:26,&#34;abbreviation&#34;:&#34;SAC&#34;,&#34;city&#34;:&#34;Sacramento&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Pacific&#34;,&#34;full_name&#34;:&#34;Sacramento Kings&#34;,&#34;name&#34;:&#34;Kings&#34;},&#34;weight_pounds&#34;:245},{&#34;id&#34;:382,&#34;first_name&#34;:&#34;Billy&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Preston&#34;,&#34;position&#34;:&#34;F&#34;,&#34;team&#34;:{&#34;id&#34;:6,&#34;abbreviation&#34;:&#34;CLE&#34;,&#34;city&#34;:&#34;Cleveland&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Central&#34;,&#34;full_name&#34;:&#34;Cleveland Cavaliers&#34;,&#34;name&#34;:&#34;Cavaliers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:384,&#34;first_name&#34;:&#34;Zhou&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Qi&#34;,&#34;position&#34;:&#34;F-C&#34;,&#34;team&#34;:{&#34;id&#34;:11,&#34;abbreviation&#34;:&#34;HOU&#34;,&#34;city&#34;:&#34;Houston&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Southwest&#34;,&#34;full_name&#34;:&#34;Houston Rockets&#34;,&#34;name&#34;:&#34;Rockets&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:388,&#34;first_name&#34;:&#34;Zach&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Randolph&#34;,&#34;position&#34;:&#34;F&#34;,&#34;team&#34;:{&#34;id&#34;:26,&#34;abbreviation&#34;:&#34;SAC&#34;,&#34;city&#34;:&#34;Sacramento&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Pacific&#34;,&#34;full_name&#34;:&#34;Sacramento Kings&#34;,&#34;name&#34;:&#34;Kings&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:430,&#34;first_name&#34;:&#34;DJ&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Stephens&#34;,&#34;position&#34;:&#34;G-F&#34;,&#34;team&#34;:{&#34;id&#34;:15,&#34;abbreviation&#34;:&#34;MEM&#34;,&#34;city&#34;:&#34;Memphis&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Southwest&#34;,&#34;full_name&#34;:&#34;Memphis Grizzlies&#34;,&#34;name&#34;:&#34;Grizzlies&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:437,&#34;first_name&#34;:&#34;Milos&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Teodosic&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:13,&#34;abbreviation&#34;:&#34;LAC&#34;,&#34;city&#34;:&#34;LA&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Pacific&#34;,&#34;full_name&#34;:&#34;LA Clippers&#34;,&#34;name&#34;:&#34;Clippers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:448,&#34;first_name&#34;:&#34;Gary&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Trent Jr.&#34;,&#34;position&#34;:&#34;G&#34;,&#34;team&#34;:{&#34;id&#34;:25,&#34;abbreviation&#34;:&#34;POR&#34;,&#34;city&#34;:&#34;Portland&#34;,&#34;conference&#34;:&#34;West&#34;,&#34;division&#34;:&#34;Northwest&#34;,&#34;full_name&#34;:&#34;Portland Trail Blazers&#34;,&#34;name&#34;:&#34;Trail Blazers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:494,&#34;first_name&#34;:&#34;Michael&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Smith&#34;,&#34;position&#34;:&#34;&#34;,&#34;team&#34;:{&#34;id&#34;:2,&#34;abbreviation&#34;:&#34;BOS&#34;,&#34;city&#34;:&#34;Boston&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Atlantic&#34;,&#34;full_name&#34;:&#34;Boston Celtics&#34;,&#34;name&#34;:&#34;Celtics&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:495,&#34;first_name&#34;:&#34;John&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Morton&#34;,&#34;position&#34;:&#34;&#34;,&#34;team&#34;:{&#34;id&#34;:6,&#34;abbreviation&#34;:&#34;CLE&#34;,&#34;city&#34;:&#34;Cleveland&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Central&#34;,&#34;full_name&#34;:&#34;Cleveland Cavaliers&#34;,&#34;name&#34;:&#34;Cavaliers&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:496,&#34;first_name&#34;:&#34;Howard&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Wright&#34;,&#34;position&#34;:&#34;&#34;,&#34;team&#34;:{&#34;id&#34;:1,&#34;abbreviation&#34;:&#34;ATL&#34;,&#34;city&#34;:&#34;Atlanta&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Southeast&#34;,&#34;full_name&#34;:&#34;Atlanta Hawks&#34;,&#34;name&#34;:&#34;Hawks&#34;},&#34;weight_pounds&#34;:null},{&#34;id&#34;:497,&#34;first_name&#34;:&#34;Michael&#34;,&#34;height_feet&#34;:null,&#34;height_inches&#34;:null,&#34;last_name&#34;:&#34;Ansley&#34;,&#34;position&#34;:&#34;&#34;,&#34;team&#34;:{&#34;id&#34;:22,&#34;abbreviation&#34;:&#34;ORL&#34;,&#34;city&#34;:&#34;Orlando&#34;,&#34;conference&#34;:&#34;East&#34;,&#34;division&#34;:&#34;Southeast&#34;,&#34;full_name&#34;:&#34;Orlando Magic&#34;,&#34;name&#34;:&#34;Magic&#34;},&#34;weight_pounds&#34;:null}],&#34;meta&#34;:{&#34;total_pages&#34;:151,&#34;current_page&#34;:1,&#34;next_page&#34;:2,&#34;per_page&#34;:25,&#34;total_count&#34;:3757}} .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/10/02/javaapi.html",
            "relUrl": "/2022/10/02/javaapi.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Arrays and Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics giannis = new Pics(&quot;giannis&quot;, &quot;png&quot;); //giannis.greyscale(); //giannis.redscale(); //giannis.greenscale(); //giannis.bluescale(); giannis.printStats(&quot;Original&quot;); giannis.resize(33); giannis.printStats(&quot;Scaled&quot;); giannis.convertToAscii(); } } Pics.main(null); . Original: 1138463 1200x675 images/giannis.png Scaled: 195187 396x223 images/tmp/giannis.png .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/10/02/Arrays-Images.html",
            "relUrl": "/2022/10/02/Arrays-Images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Fibonacci",
            "content": "// Mort&#39;s Code for Fibonacci Class import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Fibonacci While Loop . public class FiboWhile extends Fibo { public FiboWhile() { this(10); // telescope to avoid code duplication, using default } public FiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboWhile wFib = new FiboWhile(); wFib.print(); } // Custom init using while loop instead protected void init() { this.name = &quot;While Loop&quot;; int i = 0; // new long array with only 0 long[] f = new long[] {0,1}; //while i is less than the length desired while (i &lt; this.size) { // sets data first, then adds to f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; // adds to counter i++; } } } FiboWhile.main(null) . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Fibonacci Recursion Loop . public class FiboRecur extends Fibo { public FiboRecur() { this(10); // telescope to avoid code duplication, using default } public FiboRecur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Recursion function, using int i as a counter protected void recur(long[] f, int i) { // Sets data using beginning value this.setData(f[0]); // Cretes new long f = new long[]{f[1], f[0] + f[1]}; // Adds to counter i++; if (i &lt; this.size) { // Recusion continues if size limit has not been reached this.recur(f, i); } } // Custom init using recursion loop instead protected void init() { this.name = &quot;Recursion&quot;; // Uses int i as a counter for recusion, also creates initial long[] int i = 0; long[] f = new long[] {0,1}; // input long and counter i into recursion function this.recur(f, i); } } FiboRecur.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Fibonacci For Loop . public class FiboFor extends Fibo { public FiboFor() { this(10); // telescope to avoid code duplication, using default } public FiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Custom init using for loop instead protected void init() { this.name = &quot;For loop&quot;; // creates initial long[] long[] f = new long[] {0,1}; // iterates through until reaches desired length for (int i = 0; i &lt; this.size; i++) { // sets data, then updates f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } FiboFor.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/25/fibonacci.html",
            "relUrl": "/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "AP CSA 2022 FRQ",
            "content": "The Book class is used to store information about a book. A partial Book class definition is shown. . You will write a class Textbook, which is a subclass of Book. A Textbook has an edition number, which is a positive integer used to identify different versions of the book. The getBookInfo method, when called on a Textbook, returns a string that also includes the edition information, as shown in the example. Information about the book title and price must be maintained in the Book class. Information about the edition must be maintained in the Textbook class. The Textbook class contains an additional method, canSubstituteFor, which returns true if a Textbook is a valid substitute for another Textbook and returns false otherwise. The current Textbook is a valid substitute for the Textbook referenced by the parameter of the canSubstituteFor method if the two Textbook objects have the same title and if the edition of the current Textbook is greater than or equal to the edition of the parameter. . public class Textbook extends Book //Define class called textbook //Since we are using a super class we need to extend book { private int edition; public Textbook(String t, double p, int e) //Constructor called Textbook passes through parameters for title, price, and edition //Each parameter has a different primative that need to be listed before hand { super(t, p); //This helps to take care for both the title and the price this.edition = e; } public int getEdition() //By creating this public int, we can have the computer return our book title name { return edition; } public String getBookInfo() { return super.getBookInfo() + &quot;-&quot; + edition; //This returns the title of the book, along with both the price and the edition } public boolean canSubstituteFor(Textbook other) //canSubstituteFor means that if two books have the same title, it will access the edition number and if the current textbook edition is greater than or equal to the edition of the parameter { return getTitle().equals(other.getTitle()) &amp;&amp; this.edition &gt;= other.getEdition(); } } . | public class Textbook extends book cannot find symbol symbol: class book | return super.getBookInfo() + &#34;-&#34; + edition; non-static variable super cannot be referenced from a static context | return super.getBookInfo() + &#34;-&#34; + edition; cannot find symbol symbol: method getBookInfo() | return getTitle().equals(other.getTitle()) &amp;&amp; this.edition &gt;= other.getEdition(); cannot find symbol symbol: method getTitle() | return getTitle().equals(other.getTitle()) &amp;&amp; this.edition &gt;= other.getEdition(); cannot find symbol symbol: method getTitle() .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/19/FRQ-2.html",
            "relUrl": "/2022/09/19/FRQ-2.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Java Iteration",
            "content": "class playerLoop { // The area between class definition and the 1st method is where we keep data for object in Java String [][] players; /** * Constructor initializes a 2D array of s */ public playerLoop() { //Storing Data in 2D arrays players = new String[][]{ //Player 0 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 1 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 2 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 3 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 4 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, }; } /** * Loop and print s in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Player Shooting Soccer Ball Poem in Java Loop&quot;); System.out.println(&quot;&quot;); // players (non-primitive) defined in constructor knows its length int playerCount = players.length; for (int i = playerCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of players // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; players shooting the ball...&quot;); //how many separate parts are there in a player player? int partCount = players[0].length; for (int row = 0; row &lt; partCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each player part by part, will eventually print entire column*/ for (int col = 0; col &lt; playerCount; col++) { // prints specific part of the player from the column System.out.print(players[col][row] + &quot; &quot;); //this is new line between separate parts } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing playerCount variable by 1 System.out.println(&quot;One missed and got benched&quot;); playerCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more players shooting in the field&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new playerLoop().printPoem(); //a new player list and output in one step } } playerLoop.main(null); . Player Shooting Soccer Ball Poem in Java Loop 5 players shooting the ball... o__ o__ o__ o__ o__ /| /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 4 players shooting the ball... o__ o__ o__ o__ /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 3 players shooting the ball... o__ o__ o__ /| /| /| / &gt; o / &gt; o / &gt; o One missed and got benched 2 players shooting the ball... o__ o__ /| /| / &gt; o / &gt; o One missed and got benched 1 players shooting the ball... o__ /| / &gt; o One missed and got benched No more players shooting in the field THE END .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/15/java-iteration.html",
            "relUrl": "/2022/09/15/java-iteration.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Human Day/Psychology Video Notes",
            "content": "Takeaways From Video . All successful people find ways to keep themselves under a good/calm state of mind in order to be the most effective in a work setting | Many people think that making mistakes and not succeeding at first is bad. In reality, if you ask any successful person about failure, they will respond by saying that in order to succeed in life you must taste the defeat of failure | . | She also stated, that it is very important for people to reflect on the many different gifts we are given in life Having a home, supportful parents, and access to clean food and water are some of the many examples that we need to be thankful for in life In order to show our gratitude, we must take time atleast 5 mins a day in order to reflect on what we are thankful for each day cuz tommorow is never guaranteed | . | . | In addition, she also spoke about how we should make sure to let go of harships or fights that may have happened in the past with friends or family She said this because at the end of the day, many of these fights are trivial and if something bad happens to anyone you will always bound up feeling regret for not letting go and apologizing/taking their apology My Gratitude List . | . | Having good family and friends | Access to food, water, and shelter | Opportunities to pursue my passions | Ability to travel with my family to many different countries around the world My Future Goals . | To be the best version of myself in all aspects of life School, friends, family member, and athlete | . | Make sure to reflect on my wrongdoings and thnk about what I can do in the future to avoid these mistakes for reoccurring | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/11/Psychology-and-the-Good-Life-Summarization.html",
            "relUrl": "/markdown/2022/09/11/Psychology-and-the-Good-Life-Summarization.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "If Statement Notes",
            "content": "A conditional statement lets us choose which statement will be executed next • Therefore they are sometimes called selection statements • Conditional statements give us the power to make basic decisions • The Java conditional statements are the: – if statement – if-else statement – switch statement . # Boolean Notes | The Boolean logical operators are : | , &amp; , ^ , ! , || , &amp;&amp; , == , != . | Java supplies a primitive data type called Boolean, instances of which can take the value true or false only, and have the default value false. | The major use of Boolean facilities is to implement the expressions which control if decisions and while loops. | . boolean isSoccerFan = true;//If you set a variable along with the word &quot;boolean&quot; to true, //this allows for the if statements to print the correct statements if(isSoccerFan){ System.out.println(&quot;Watches 1 Soccer Game Every Weekend&quot;); } else { System.out.println(&quot;Watches 0 Soccer Games&quot;); } . Watches 1 Soccer Game Every Weekend . int weight = 200; //Weights Are Rounded to Nearest 10(in pounds) between 130-250lbs if(weight==130){ System.out.println(&quot;Your Are Very Light&quot;); } else if(weight==140){ System.out.println(&quot;Your Are Quite Light&quot;); } else if(weight==150){ System.out.println(&quot;Your Are A Little Bit On The Lighter Side&quot;); } else if(weight==160){ System.out.println(&quot;You Are At A Good Weight&quot;); } else if(weight==170){ System.out.println(&quot;You Are At A Good Weight&quot;); } else if(weight==180){ System.out.println(&quot;You Are At A Strong Weight&quot;); } else if(weight==190){ System.out.println(&quot;You Are Very Close To Obese&quot;); } else if(weight==200){ System.out.println(&quot;You Are Just Obese&quot;); } else if(weight==210){ System.out.println(&quot;You Are Slightly Obese&quot;); } else if(weight==220){ System.out.println(&quot;You Are Nearly Moderately Obese&quot;); } else if(weight==230){ System.out.println(&quot;You Are Moderately Obese&quot;); } else if(weight==240){ System.out.println(&quot;You Are Nearly Very Obese&quot;); } else if(weight==250){ System.out.println(&quot;You Are Very Obese&quot;); } . You Are Just Obese . Switch Statement Notes . A switch statement allows a variable to be tested for equality against a list of values. | Each value is called a case, and the variable being switched on is checked for each case. | The variable used in a switch statement can only be integers, convirtable integers (byte, short, char), strings and enums. | You can have any number of case statements within a switch. | End of each statement is followed with a comparable value and a colon. | The value for a case must be the same data type as the variable in the switch and it must be a constant or a literal. | When the variable being switched on is equal to a case, the statements following that case will execute until a break statement is reached. | When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement. | . int weight = 200; //Weights Are Rounded to Nearest 10(in pounds) between 130-250lbs. Intended for indivduals between the height of 5&#39;8 to 5&#39;11 switch(weight){ case 130: System.out.println(&quot;You are Very Light&quot;); break; case 140: System.out.println(&quot;Your Are Very Light&quot;); break; case 150: System.out.println(&quot;Your Are A Little Bit On The Lighter Side&quot;); break; case 160: System.out.println(&quot;You Are At A Good Weight&quot;); break; case 170: System.out.println(&quot;You Are At A Good Weight&quot;); break; case 180: System.out.println(&quot;You Are At A Strong Weight&quot;); break; case 190: System.out.println(&quot;You Are Very Close To Obese&quot;); break; case 200: System.out.println(&quot;You Are Just Obese&quot;); break; case 210: System.out.println(&quot;You Are Slightly Obese&quot;); break; case 220: System.out.println(&quot;You Are Nearly Moderately Obese&quot;); break; case 230: System.out.println(&quot;You Are Moderately Obese&quot;); break; case 240: System.out.println(&quot;You Are Nearly Very Obese&quot;); break; case 250: System.out.println(&quot;You Are Very Obese&quot;); break; default: System.out.println(&quot;Invalid Input&quot;) break; } . You Are Just Obese . DeMorgan&#39;s Law Notes . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. | They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2). | Applying DeMorgan’s Laws to !(x &lt; 3 &amp;&amp; y &gt; 2) yields !(x &lt; 3) || !(y &gt; 2) which means that this complex conditional will be true when (x &gt;= 3 || y &lt;= 2). | The negation modifies each conditional as shown below. &lt; becomes &gt;= | &quot;&gt; becomes &lt;=&quot; | == becomes != | &lt;= becomes &gt; | &quot;&gt;= becomes &lt;&quot; | != becomes == | . | not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b | not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b | . public class DeMorgansLawExample { public static boolean exVarOne = true; public static boolean exVarTwo = false; public static void main(String[] args) { // The two boolean expressions below are equal if (!(exVarOne &amp;&amp; exVarTwo)) { System.out.println(&quot;The boolean expression is true&quot;); } else { System.out.println(&quot;The boolean expression is false&quot;); } if (!(exVarOne || exVarTwo)) { System.out.println(&quot;The boolean expression is true&quot;); } else { System.out.println(&quot;The boolean expression is false&quot;); } } } DeMorgansLawExample.main(null) . The boolean expression is true The boolean expression is false .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/11/if-else-examples-lesson.html",
            "relUrl": "/2022/09/11/if-else-examples-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 2 - Java Menu Colors",
            "content": "Screenshot . .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/06/colors-javamenu.html",
            "relUrl": "/markdown/2022/09/06/colors-javamenu.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Units 5-16 Code.org Week 2",
            "content": "Lesson 6 . Subclasses can be derived by entending a superclassing and using its attributes and behaviors. Syntax error is when your code doesn’t follow the correct formatting which results in all the code not running. Logic error is when the code ends up running but it doesn’t do what the user expects because of the logic behind it. . Lesson 9 . Painter plus extends the painter class, so when the MyNeighbrhood has access to all the public void variables within the painter plus.java file. . Lesson 11 . In this multiple choice question, the user is struggling to figure out the logic error they are reciving in their code. They are trying to make their character go one way but the character keeps going in the wrong direction, therefore by using the getDirection feature, the user can figure out where their code may be going wrong and therefore change their code to make sure that it completes the logic they were going for. . Lesson 13 . The PatternPainter class extends the PainterPlus class and the PainterPlus class extends the Painter class, so the when the PatternPainter is initialized in the MyNeighborhood.java file it can also access all the functions from the Painter and PainterPlus classes. .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/06/Code.org-Snippets.html",
            "relUrl": "/markdown/2022/09/06/Code.org-Snippets.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Java Menu Week 2",
            "content": "import java.net.http.*; import java.util.Scanner; . import java.util.Scanner; import java.lang.Math; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, {&quot;Reset&quot;,&quot; u001B[0m&quot;}, {&quot;Liverpool&quot;,&quot; 033[1;91m&quot;}, {&quot;Tottenham&quot;,&quot; 033[0;107m&quot;}, {&quot;Real&quot;,&quot; 033[0;95m&quot;}, {&quot;Bayern&quot;,&quot; 033[0;101m&quot;}, {&quot;Dortmund&quot;, &quot; 033[0;93m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Soccer Info&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Premier League Scorers&quot;); System.out.println(&quot;2 - La Liga Scorers&quot;); System.out.println(&quot;3 - Champions Scorers &quot;); System.out.println(&quot;4 - Bundesliga Scorers&quot;); System.out.println(&quot;5 - Serie A Scorers&quot;); System.out.println(&quot;6 - Goals Against Calculator&quot;); System.out.println(&quot;7 - Shooting Percentage Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: System.out.print(&quot;Program Exiting...&quot;); quit = true; break; case 1: System.out.println(COLORS[4][ANSI] + &quot;Premier League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Son&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t Cristiano Ronaldo&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Harry Kane&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Sadio Mane&quot; + COLORS[8][ANSI]); break; case 2: System.out.println(COLORS[1][ANSI] + &quot;La Liga Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Iago Aspas&quot;); System.out.println(&quot; t Raul de Tomas&quot;); System.out.println(COLORS[11][ANSI] + &quot; t Vinicius&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Juanmi&quot;); // for(int i = 0; i &lt; COLORS.length; i++) // System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.println(COLORS[6][ANSI] + &quot;Champions League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Sébastien Haller&quot;); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Christopher Nkunku&quot;); // for (int i = 0; i &lt; 20; i++) { // int random = (int) (Math.random() * COLORS.length); // try { // Thread.sleep(100); // } catch (Exception e) { // System.out.println(e); // } // System.out.print(COLORS[random][ANSI] + &quot;#&quot;); // } break; case 4: System.out.println(COLORS[5][ANSI] + &quot;Bundesliga&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Patrick Schick&quot;); System.out.println(&quot; t 033[0;93m&quot; + COLORS[13][ANSI] + &quot;Erling Haaland&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Anothny Modeste&quot;); System.out.println(&quot; t Christopher Nkunku&quot;); break; case 5: System.out.println(COLORS[2][ANSI] + &quot;Serie A&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Ciro Immobile&quot;); System.out.println(&quot; t Dušan Vlahović&quot;); System.out.println(&quot; t Lautaro Martínez&quot;); System.out.println(&quot; t Tammy Abraham&quot;); System.out.println(&quot; t Giovanni Simeone&quot;); break; case 6: Scanner myObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Against and Games Played:&quot;); int GoalsAgainst = myObj.nextInt(); double GamesPlayed = myObj.nextDouble(); myObj.close(); System.out.println(&quot;Goals Against Average: &quot; + GoalsAgainst/GamesPlayed); case 7: Scanner newObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Scored and Shots Taken:&quot;); int GoalsScored = newObj.nextInt(); double ShotsTaken = newObj.nextDouble(); newObj.close(); System.out.println(&quot;Shooting Percentage: &quot; + GoalsScored/ShotsTaken); default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Soccer Info - 1 - Premier League Scorers 2 - La Liga Scorers 3 - Champions Scorers 4 - Bundesliga Scorers 5 - Serie A Scorers 6 - Goals Against Calculator 7 - Shooting Percentage Calculator 0 - Quit - 4 4: Bundesliga Robert Lewangoalski Patrick Schick Erling Haaland Anothny Modeste Christopher Nkunku 5 5: Serie A Ciro Immobile Dušan Vlahović Lautaro Martínez Tammy Abraham Giovanni Simeone 1 1: Premier League Top Scorers Mohamed Salah Son Cristiano Ronaldo Harry Kane Sadio Mane 2 2: La Liga Top Scorers Karim Benzema Iago Aspas Raul de Tomas Vinicius Juanmi 3 3: Champions League Top Scorers Karim Benzema Robert Lewangoalski Sébastien Haller Mohamed Salah Christopher Nkunku 6 6: Enter Goals Against and Games Played: 10 2 Goals Against Average: 5.0 Enter Goals Scored and Shots Taken: 7 0 Shooting Percentage: Infinity Unexpected choice, try again. 0 0: Program Exiting... .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/05/week2menu.html",
            "relUrl": "/2022/09/05/week2menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Triple Double Calculator",
            "content": "//A triple-double is achieved when a player has double-digit stats (at least 10) in all the categories(points, assists, rebounds). public class BasketballStatsTripleDouble { ArrayList&lt;Integer&gt; points; ArrayList&lt;Integer&gt; assists; ArrayList&lt;Integer&gt; rebounds; int games; public BasketballStatsTripleDouble() { this.points = new ArrayList&lt;&gt;(); this.enterPoints(); this.assists = new ArrayList&lt;&gt;(); this.enterAssists(); this.rebounds = new ArrayList&lt;&gt;(); this.enterRebounds(); } private void enterPoints() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int pointsScored = input.nextInt(); System.out.println(pointsScored); this.points.add(pointsScored); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); } } private void enterAssists() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int assistsTallied = input.nextInt(); System.out.println(assistsTallied); this.assists.add(assistsTallied); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); } } private void enterRebounds() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter Number of Rebounds, 0 to exit: &quot;); try { int reboundsTallied = input.nextInt(); System.out.println(reboundsTallied); this.rebounds.add(reboundsTallied); } catch (Exception e) { System.out.println(&quot;Not A Valid Number (form like 9), &quot; + e); } input.close(); } } private void enterGames() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int games = input.nextInt(); System.out.println(games); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); this.games = games; } public int getNumberOfTripleDoubles() { int numberOfTripleDoubles = 0; for (int x=0; x&lt;this.games; x++) { int p = this.points.get(x); int a = this.assists.get(x); int r = this.rebounds.get(x); if (tripleDouble(p,a,r)==true) { System.out.println (&quot;In game&quot; + (x+1) + &quot;you achieved a triple double&quot;); numberOfTripleDoubles++; } } return (numberOfTripleDoubles); } private boolean tripleDouble(int points, int assists, int rebounds) { if(points &gt;= 10 &amp;&amp; assists &gt;= 10 &amp;&amp; rebounds &gt;= 10) { return true; } return false; } public static void main(String[] args) { BasketballStatsTripleDouble stats = new BasketballStatsTripleDouble(); System.out.println(&quot;Number of Triple Doubles &quot; + String.format(&quot;%.2f&quot;, stats.getNumberOfTripleDoubles())); } } BasketballStatsTripleDouble.main(null); . Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 0 Enter a Integer, 0 to exit: 12 Enter a Integer, 0 to exit: 1 Enter a Integer, 0 to exit: 2 Enter a Integer, 0 to exit: 3 Enter a Integer, 0 to exit: 24 Enter a Integer, 0 to exit: 0 Enter a Integer, 0 to exit: .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/tripledoubles.html",
            "relUrl": "/2022/08/29/tripledoubles.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Bash Notebook",
            "content": "python --version python2 --version conda --version javac --version java --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.16 conda 4.14.0 javac 18.0.2 openjdk 18.0.2 2022-07-19 OpenJDK Runtime Environment Homebrew (build 18.0.2+0) OpenJDK 64-Bit Server VM Homebrew (build 18.0.2+0, mixed mode, sharing) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/mfcbpranav/Library/Jupyter/kernels/bash java /Users/mfcbpranav/Library/Jupyter/kernels/java javascript /Users/mfcbpranav/Library/Jupyter/kernels/javascript python3 /Users/mfcbpranav/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/Bash-Test.html",
            "relUrl": "/2022/08/29/Bash-Test.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Ap Test Planner",
            "content": "Plan . Must Follow along class weekly requirements | Will make sure to watch collegboard videos | Will do the code.org assignments weekly to make sure that I am ahead | Daily CB videos | Organize jupyter based on units w/ key code segments Practice AP MCs and FRQs, especially near April . | Collegeboard work and practice | As AP Test date gets closer I will: | Take practice tests to determine strong and weak concepts | Review old material and search for new resources | Take practice MCs | Take practice FRQs | Take full lenght, sit down, timed AP exams | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/AP-Test-Planner.html",
            "relUrl": "/2022/08/29/AP-Test-Planner.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Title",
            "content": "",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/23/New-Java-Hack.html",
            "relUrl": "/2022/08/23/New-Java-Hack.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Title",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/21/python-hello-world.html",
            "relUrl": "/2022/08/21/python-hello-world.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | [Java Jupyter Notebook]https://github.com/PranavP04/OfficialTri1PranavCSA/2022/08/21/Java-Jupyter-Notebook.html) . | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . Spring Portfolio Commit | . Issue .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/08/21/Tools.html",
            "relUrl": "/markdown/2022/08/21/Tools.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/21/Python-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Python-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}