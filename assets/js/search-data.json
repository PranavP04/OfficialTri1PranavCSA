{
  
    
        "post0": {
            "title": "Pranav IJave Kernel Examples",
            "content": "public class PrimitiveExamples { public static void main(String[] args) { int exampleInt = 94; double exampleDouble = 100.4; boolean exampleBoolean = false; String exampleString = &quot;Argentina winning the world cup!&quot;; String exampleStringFormal = new String(&quot;Lionel Messi along with the Argentinian National Team are the favorites for this World Cup&quot;); System.out.println(&quot;Integer Example: &quot; + exampleInt); System.out.println(&quot;Double Example: &quot; + exampleDouble); System.out.println(&quot;Boolean Example: &quot; + exampleBoolean); System.out.println(&quot;String Example: &quot; + exampleString); System.out.println(&quot;Formal String Example: &quot; + exampleStringFormal); } } PrimitiveExamples.main(null) . Integer Example: 94 Double Example: 100.4 Boolean Example: false String Example: Argentina winning the world cup! Formal String Example: Lionel Messi along with the Argentinian National Team are the favorites for this World Cup . import java.util.Scanner; public class PranavPrimitivesExamples { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type An Integer: &quot;); try { int PersonInt = input.nextInt(); System.out.println(PersonInt); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t An Integer (form like 159), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A Double: &quot;); try { double PersonDouble = input.nextDouble(); System.out.println(PersonDouble); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A Double (form like 9.99), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A Boolean: &quot;); try { boolean PersonBoolean = input.nextBoolean(); System.out.println(PersonBoolean); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A Boolean (true or false), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type A String: &quot;); try { String PersonString = input.nextLine(); System.out.println(PersonString); } catch (Exception e) { System.out.println(&quot;This Isn&#39;t A String, &quot; + e); } input.close(); } } PranavPrimitivesExamples.main(null); . Type An Integer: 5 5 Type A Double: 10.7 10.7 Type A Boolean: true true Type A String: yooooo yooooo . . public class PranavPrimitiveDivision { public static void main(String[] args) { int b1 = 9, b2 = 3; System.out.println(&quot;Division For Integers&quot;); System.out.println(&quot;int output with concatenation: &quot; + b1 + &quot;/&quot; + b2 + &quot; = &quot; + b1/b2); System.out.println(String.format(&quot;int output with format: %d/%d = %d&quot;,b1, b2, b1/b2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,b1, b2, b1/b2); double c1 = 9, c2 = 3; System.out.println(&quot;Division For Doubles&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + c1 + &quot;/&quot; + c2 + &quot; = &quot; + c1/c2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,c1, c2, c1/c2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,c1, c2, c1/c2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,b1, b2, b1/(double)b2); System.out.println(&quot; tint using modulo for remainder: &quot; + b1 + &quot;/&quot; + b2 + &quot; = &quot; + b1/b2 + &quot; remainder &quot; + b1%b2); } } PranavPrimitiveDivision.main(null); . Division For Integers int output with concatenation: 9/3 = 3 int output with format: 9/3 = 3 int output with printf: 9/3 = 3 Division For Doubles double output with concatenation: 9.0/3.0 = 3.0 double output with format: 9.00/3.00 = 3.00 double output with printf: 9.00/3.00 = 3.00 Casting and Remainders int cast to double on division: 9/3 = 3.00 int using modulo for remainder: 9/3 = 3 remainder 0 . public class PranavSchoolGradeCalculator { ArrayList&lt;Double&gt; grades; public PranavSchoolGradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.grades.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } public double average() { double total = 0; for (double num : this.grades) { total += num; } return (total / this.grades.size()); } public static void main(String[] args) { PranavSchoolGradeCalculator grades = new PranavSchoolGradeCalculator(); System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); } } PranavSchoolGradeCalculator.main(null); . Enter a double, 0 to exit: 10.5 10.5 Enter a double, 0 to exit: 11 11.0 Enter a double, 0 to exit: 12.3 12.3 Enter a double, 0 to exit: 14.5 14.5 Enter a double, 0 to exit: 55.5 55.5 Enter a double, 0 to exit: 65.6 65.6 Enter a double, 0 to exit: 0 0.0 Average: 28.23 . public class PranavSchoolGradeCalculator { ArrayList&lt;Double&gt; grades; public PranavSchoolGradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.grades.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } public double average() { double total = 0; for (double num : this.grades) { total += num; } return (total / this.grades.size()); } public static void main(String[] args) { PranavSchoolGradeCalculator grades = new PranavSchoolGradeCalculator(); System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); } } .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/12/PranavPrimitiveJupyterPage.html",
            "relUrl": "/2022/09/12/PranavPrimitiveJupyterPage.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/12/Java-Jupyter-Notebook.html",
            "relUrl": "/2022/09/12/Java-Jupyter-Notebook.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Human Day/Psychology Video Notes",
            "content": "Takeaways From Video . All successful people find ways to keep themselves under a good/calm state of mind in order to be the most effective in a work setting | Many people think that making mistakes and not succeeding at first is bad. In reality, if you ask any successful person about failure, they will respond by saying that in order to succeed in life you must taste the defeat of failure | . | She also stated, that it is very important for people to reflect on the many different gifts we are given in life Having a home, supportful parents, and access to clean food and water are some of the many examples that we need to be thankful for in life In order to show our gratitude, we must take time atleast 5 mins a day in order to reflect on what we are thankful for each day cuz tommorow is never guaranteed | . | . | In addition, she also spoke about how we should make sure to let go of harships or fights that may have happened in the past with friends or family She said this because at the end of the day, many of these fights are trivial and if something bad happens to anyone you will always bound up feeling regret for not letting go and apologizing/taking their apology My Gratitude List . | . | Having good family and friends | Access to food, water, and shelter | Opportunities to pursue my passions | Ability to travel with my family to many different countries around the world My Future Goals . | To be the best version of myself in all aspects of life School, friends, family member, and athlete | . | Make sure to reflect on my wrongdoings and thnk about what I can do in the future to avoid these mistakes for reoccurring | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/11/Psychology-and-the-Good-Life-Summarization.html",
            "relUrl": "/markdown/2022/09/11/Psychology-and-the-Good-Life-Summarization.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "If Statement Notes",
            "content": "A conditional statement lets us choose which statement will be executed next • Therefore they are sometimes called selection statements • Conditional statements give us the power to make basic decisions • The Java conditional statements are the: – if statement – if-else statement – switch statement . # Boolean Notes | The Boolean logical operators are : | , &amp; , ^ , ! , || , &amp;&amp; , == , != . | Java supplies a primitive data type called Boolean, instances of which can take the value true or false only, and have the default value false. | The major use of Boolean facilities is to implement the expressions which control if decisions and while loops. | . boolean isSoccerFan = true;//If you set a variable along with the word &quot;boolean&quot; to true, //this allows for the if statements to print the correct statements if(isSoccerFan){ System.out.println(&quot;Watches 1 Soccer Game Every Weekend&quot;); } else { System.out.println(&quot;Watches 0 Soccer Games&quot;); } . Watches 1 Soccer Game Every Weekend . int weight = 200; //Weights Are Rounded to Nearest 10(in pounds) between 130-250lbs if(weight==130){ System.out.println(&quot;Your Are Very Light&quot;); } else if(weight==140){ System.out.println(&quot;Your Are Quite Light&quot;); } else if(weight==150){ System.out.println(&quot;Your Are A Little Bit On The Lighter Side&quot;); } else if(weight==160){ System.out.println(&quot;You Are At A Good Weight&quot;); } else if(weight==170){ System.out.println(&quot;You Are At A Good Weight&quot;); } else if(weight==180){ System.out.println(&quot;You Are At A Strong Weight&quot;); } else if(weight==190){ System.out.println(&quot;You Are Very Close To Obese&quot;); } else if(weight==200){ System.out.println(&quot;You Are Just Obese&quot;); } else if(weight==210){ System.out.println(&quot;You Are Slightly Obese&quot;); } else if(weight==220){ System.out.println(&quot;You Are Nearly Moderately Obese&quot;); } else if(weight==230){ System.out.println(&quot;You Are Moderately Obese&quot;); } else if(weight==240){ System.out.println(&quot;You Are Nearly Very Obese&quot;); } else if(weight==250){ System.out.println(&quot;You Are Very Obese&quot;); } . You Are Just Obese . Switch Statement Notes . A switch statement allows a variable to be tested for equality against a list of values. | Each value is called a case, and the variable being switched on is checked for each case. | The variable used in a switch statement can only be integers, convirtable integers (byte, short, char), strings and enums. | You can have any number of case statements within a switch. | End of each statement is followed with a comparable value and a colon. | The value for a case must be the same data type as the variable in the switch and it must be a constant or a literal. | When the variable being switched on is equal to a case, the statements following that case will execute until a break statement is reached. | When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement. | . int weight = 200; //Weights Are Rounded to Nearest 10(in pounds) between 130-250lbs. Intended for indivduals between the height of 5&#39;8 to 5&#39;11 switch(weight){ case 130: System.out.println(&quot;You are Very Light&quot;); break; case 140: System.out.println(&quot;Your Are Very Light&quot;); break; case 150: System.out.println(&quot;Your Are A Little Bit On The Lighter Side&quot;); break; case 160: System.out.println(&quot;You Are At A Good Weight&quot;); break; case 170: System.out.println(&quot;You Are At A Good Weight&quot;); break; case 180: System.out.println(&quot;You Are At A Strong Weight&quot;); break; case 190: System.out.println(&quot;You Are Very Close To Obese&quot;); break; case 200: System.out.println(&quot;You Are Just Obese&quot;); break; case 210: System.out.println(&quot;You Are Slightly Obese&quot;); break; case 220: System.out.println(&quot;You Are Nearly Moderately Obese&quot;); break; case 230: System.out.println(&quot;You Are Moderately Obese&quot;); break; case 240: System.out.println(&quot;You Are Nearly Very Obese&quot;); break; case 250: System.out.println(&quot;You Are Very Obese&quot;); break; default: System.out.println(&quot;Invalid Input&quot;) break; } . You Are Just Obese . DeMorgan&#39;s Law Notes . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. | They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2). | Applying DeMorgan’s Laws to !(x &lt; 3 &amp;&amp; y &gt; 2) yields !(x &lt; 3) || !(y &gt; 2) which means that this complex conditional will be true when (x &gt;= 3 || y &lt;= 2). | The negation modifies each conditional as shown below. &lt; becomes &gt;= | &quot;&gt; becomes &lt;=&quot; | == becomes != | &lt;= becomes &gt; | &quot;&gt;= becomes &lt;&quot; | != becomes == | . | not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b | not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b | . public class DeMorgansLawExample { public static boolean exVarOne = true; public static boolean exVarTwo = false; public static void main(String[] args) { // The two boolean expressions below are equal if (!(exVarOne &amp;&amp; exVarTwo)) { System.out.println(&quot;The boolean expression is true&quot;); } else { System.out.println(&quot;The boolean expression is false&quot;); } if (!exVarOne || !exVarTwo) { System.out.println(&quot;The boolean expression is true&quot;); } else { System.out.println(&quot;The boolean expression is false&quot;); } } } .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/11/if-else-examples-lesson.html",
            "relUrl": "/2022/09/11/if-else-examples-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 2 - Java Menu Colors",
            "content": "Screenshot . .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/06/colors-javamenu.html",
            "relUrl": "/markdown/2022/09/06/colors-javamenu.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Units 5-16 Code.org Week 2",
            "content": "Lesson 6 . Subclasses can be derived by entending a superclassing and using its attributes and behaviors. Syntax error is when your code doesn’t follow the correct formatting which results in all the code not running. Logic error is when the code ends up running but it doesn’t do what the user expects because of the logic behind it. . Lesson 9 . Painter plus extends the painter class, so when the MyNeighbrhood has access to all the public void variables within the painter plus.java file. . Lesson 11 . In this multiple choice question, the user is struggling to figure out the logic error they are reciving in their code. They are trying to make their character go one way but the character keeps going in the wrong direction, therefore by using the getDirection feature, the user can figure out where their code may be going wrong and therefore change their code to make sure that it completes the logic they were going for. . Lesson 13 . The PatternPainter class extends the PainterPlus class and the PainterPlus class extends the Painter class, so the when the PatternPainter is initialized in the MyNeighborhood.java file it can also access all the functions from the Painter and PainterPlus classes. .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/09/06/Code.org-Snippets.html",
            "relUrl": "/markdown/2022/09/06/Code.org-Snippets.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Java Menu Week 2",
            "content": "import java.net.http.*; import java.util.Scanner; . import java.util.Scanner; import java.lang.Math; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, {&quot;Reset&quot;,&quot; u001B[0m&quot;}, {&quot;Liverpool&quot;,&quot; 033[1;91m&quot;}, {&quot;Tottenham&quot;,&quot; 033[0;107m&quot;}, {&quot;Real&quot;,&quot; 033[0;95m&quot;}, {&quot;Bayern&quot;,&quot; 033[0;101m&quot;}, {&quot;Dortmund&quot;, &quot; 033[0;93m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Soccer Info&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Premier League Scorers&quot;); System.out.println(&quot;2 - La Liga Scorers&quot;); System.out.println(&quot;3 - Champions Scorers &quot;); System.out.println(&quot;4 - Bundesliga Scorers&quot;); System.out.println(&quot;5 - Serie A Scorers&quot;); System.out.println(&quot;6 - Goals Against Calculator&quot;); System.out.println(&quot;7 - Shooting Percentage Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: System.out.print(&quot;Program Exiting...&quot;); quit = true; break; case 1: System.out.println(COLORS[4][ANSI] + &quot;Premier League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Son&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t Cristiano Ronaldo&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Harry Kane&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Sadio Mane&quot; + COLORS[8][ANSI]); break; case 2: System.out.println(COLORS[1][ANSI] + &quot;La Liga Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Iago Aspas&quot;); System.out.println(&quot; t Raul de Tomas&quot;); System.out.println(COLORS[11][ANSI] + &quot; t Vinicius&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Juanmi&quot;); // for(int i = 0; i &lt; COLORS.length; i++) // System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.println(COLORS[6][ANSI] + &quot;Champions League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Sébastien Haller&quot;); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Christopher Nkunku&quot;); // for (int i = 0; i &lt; 20; i++) { // int random = (int) (Math.random() * COLORS.length); // try { // Thread.sleep(100); // } catch (Exception e) { // System.out.println(e); // } // System.out.print(COLORS[random][ANSI] + &quot;#&quot;); // } break; case 4: System.out.println(COLORS[5][ANSI] + &quot;Bundesliga&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Patrick Schick&quot;); System.out.println(&quot; t 033[0;93m&quot; + COLORS[13][ANSI] + &quot;Erling Haaland&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Anothny Modeste&quot;); System.out.println(&quot; t Christopher Nkunku&quot;); break; case 5: System.out.println(COLORS[2][ANSI] + &quot;Serie A&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Ciro Immobile&quot;); System.out.println(&quot; t Dušan Vlahović&quot;); System.out.println(&quot; t Lautaro Martínez&quot;); System.out.println(&quot; t Tammy Abraham&quot;); System.out.println(&quot; t Giovanni Simeone&quot;); break; case 6: Scanner myObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Against and Games Played:&quot;); int GoalsAgainst = myObj.nextInt(); double GamesPlayed = myObj.nextDouble(); myObj.close(); System.out.println(&quot;Goals Against Average: &quot; + GoalsAgainst/GamesPlayed); case 7: Scanner newObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Scored and Shots Taken:&quot;); int GoalsScored = newObj.nextInt(); double ShotsTaken = newObj.nextDouble(); newObj.close(); System.out.println(&quot;Shooting Percentage: &quot; + GoalsScored/ShotsTaken); default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Soccer Info - 1 - Premier League Scorers 2 - La Liga Scorers 3 - Champions Scorers 4 - Bundesliga Scorers 5 - Serie A Scorers 6 - Goals Against Calculator 7 - Shooting Percentage Calculator 0 - Quit - 4 4: Bundesliga Robert Lewangoalski Patrick Schick Erling Haaland Anothny Modeste Christopher Nkunku 5 5: Serie A Ciro Immobile Dušan Vlahović Lautaro Martínez Tammy Abraham Giovanni Simeone 1 1: Premier League Top Scorers Mohamed Salah Son Cristiano Ronaldo Harry Kane Sadio Mane 2 2: La Liga Top Scorers Karim Benzema Iago Aspas Raul de Tomas Vinicius Juanmi 3 3: Champions League Top Scorers Karim Benzema Robert Lewangoalski Sébastien Haller Mohamed Salah Christopher Nkunku 6 6: Enter Goals Against and Games Played: 10 2 Goals Against Average: 5.0 Enter Goals Scored and Shots Taken: 7 0 Shooting Percentage: Infinity Unexpected choice, try again. 0 0: Program Exiting... .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/09/05/week2menu.html",
            "relUrl": "/2022/09/05/week2menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Triple Double Calculator",
            "content": "//A triple-double is achieved when a player has double-digit stats (at least 10) in all the categories(points, assists, rebounds). public class BasketballStatsTripleDouble { ArrayList&lt;Integer&gt; points; ArrayList&lt;Integer&gt; assists; ArrayList&lt;Integer&gt; rebounds; int games; public BasketballStatsTripleDouble() { this.points = new ArrayList&lt;&gt;(); this.enterPoints(); this.assists = new ArrayList&lt;&gt;(); this.enterAssists(); this.rebounds = new ArrayList&lt;&gt;(); this.enterRebounds(); } private void enterPoints() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int pointsScored = input.nextInt(); System.out.println(pointsScored); this.points.add(pointsScored); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); } } private void enterAssists() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int assistsTallied = input.nextInt(); System.out.println(assistsTallied); this.assists.add(assistsTallied); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); } } private void enterRebounds() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter Number of Rebounds, 0 to exit: &quot;); try { int reboundsTallied = input.nextInt(); System.out.println(reboundsTallied); this.rebounds.add(reboundsTallied); } catch (Exception e) { System.out.println(&quot;Not A Valid Number (form like 9), &quot; + e); } input.close(); } } private void enterGames() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Enter a Integer, 0 to exit: &quot;); try { int games = input.nextInt(); System.out.println(games); } catch (Exception e) { System.out.println(&quot;Not an Integer (form like 9), &quot; + e); } input.close(); this.games = games; } public int getNumberOfTripleDoubles() { int numberOfTripleDoubles = 0; for (int x=0; x&lt;this.games; x++) { int p = this.points.get(x); int a = this.assists.get(x); int r = this.rebounds.get(x); if (tripleDouble(p,a,r)==true) { System.out.println (&quot;In game&quot; + (x+1) + &quot;you achieved a triple double&quot;); numberOfTripleDoubles++; } } return (numberOfTripleDoubles); } private boolean tripleDouble(int points, int assists, int rebounds) { if(points &gt;= 10 &amp;&amp; assists &gt;= 10 &amp;&amp; rebounds &gt;= 10) { return true; } return false; } public static void main(String[] args) { BasketballStatsTripleDouble stats = new BasketballStatsTripleDouble(); System.out.println(&quot;Number of Triple Doubles &quot; + String.format(&quot;%.2f&quot;, stats.getNumberOfTripleDoubles())); } } BasketballStatsTripleDouble.main(null); . Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 10 Enter a Integer, 0 to exit: 0 Enter a Integer, 0 to exit: 12 Enter a Integer, 0 to exit: 1 Enter a Integer, 0 to exit: 2 Enter a Integer, 0 to exit: 3 Enter a Integer, 0 to exit: 24 Enter a Integer, 0 to exit: 0 Enter a Integer, 0 to exit: .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/tripledoubles.html",
            "relUrl": "/2022/08/29/tripledoubles.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Bash Notebook",
            "content": "python --version python2 --version conda --version javac --version java --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.16 conda 4.14.0 javac 18.0.2 openjdk 18.0.2 2022-07-19 OpenJDK Runtime Environment Homebrew (build 18.0.2+0) OpenJDK 64-Bit Server VM Homebrew (build 18.0.2+0, mixed mode, sharing) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/mfcbpranav/Library/Jupyter/kernels/bash java /Users/mfcbpranav/Library/Jupyter/kernels/java javascript /Users/mfcbpranav/Library/Jupyter/kernels/javascript python3 /Users/mfcbpranav/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/Bash-Test.html",
            "relUrl": "/2022/08/29/Bash-Test.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Ap Test Planner",
            "content": "Plan . Must Follow along class weekly requirements | Will make sure to watch collegboard videos | Will do the code.org assignments weekly to make sure that I am ahead | Daily CB videos | Organize jupyter based on units w/ key code segments Practice AP MCs and FRQs, especially near April . | Collegeboard work and practice | As AP Test date gets closer I will: | Take practice tests to determine strong and weak concepts | Review old material and search for new resources | Take practice MCs | Take practice FRQs | Take full lenght, sit down, timed AP exams | .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/29/AP-Test-Planner.html",
            "relUrl": "/2022/08/29/AP-Test-Planner.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/23/New-Java-Hack.html",
            "relUrl": "/2022/08/23/New-Java-Hack.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/21/python-hello-world.html",
            "relUrl": "/2022/08/21/python-hello-world.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | [Java Jupyter Notebook]https://github.com/PranavP04/OfficialTri1PranavCSA/2022/08/21/Java-Jupyter-Notebook.html) . | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . Spring Portfolio Commit | . Issue .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2022/08/21/Tools.html",
            "relUrl": "/markdown/2022/08/21/Tools.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/2022/08/21/Python-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Python-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pranavp04.github.io/OfficialTri1PranavCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}